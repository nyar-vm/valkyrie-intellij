namespace std.categories;

union Option[T] -> T {
    Some {
        value: T
    },
    None,
}

#token_type(Variant)
#transparent(Option::Some)
def Some(value: T) -> Option[T] {
    new Option::Some {
    value
    }
}

#token_type(Variant)
#transparent
let None = Option::None;

extends Option[T]: Constructor {
    constructor(value: T) {

    }
}

extends Option {
    ⍝: # Examples
    ⍝: ```
    ⍝:
    ⍝: ```
    def is_some(self) {
        @matches(self, Some(_))
    }
    def is_none() {
        @matches(self, None)
    }
}