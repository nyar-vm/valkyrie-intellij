namespace std.primitive;

#transparent type bool = Boolean;
#transparent let true = Boolean::True;
#transparent let false = Boolean::False;

#native
#derive(Copy, Clone, Display)
union Boolean {
    True,
    False
}

#native
extends bool {
    def is_true(self) -> bool {
        @matches(self, true)
    }
    def is_false(self) -> bool {
        @matches(self, false)
    }
    def then(self) -> bool {

    }
}

#native
extends bool: Negative {
    def negative(mut self) {
        self = self.opposite()
    }
    def opposite(self) -> bool {
        self.is_false()
    }
}