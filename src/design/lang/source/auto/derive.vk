namespace std.auto;

macro derive {

}


























extends test AsyncTest {

    overload x(self) {

    }
    overload x(mut self) {

    }
    #test
    test_mut() {
        v = Vector2(1, 2)
        v.x()          // u64
        v.x().mutable; // &mut u64
    }
}


class AsyncTask {};



variant Poll[R, E] {
    /// 执行中或未开始
    Pending,
    /// 已完成的任务
    Fine {
        result: T, // 执行完成, 写入 result 地址
    },
    /// 被取消, 失败等情况
    Fail {
        error: E, // 执行失败, 写入 error 地址
    },
}

/// 标记可以调用 await 的类型
trait Awaitable {
    type Return
    type Error
    poll(self, wakeup: Waker) -> Poll[Return, Error]
}

extends Task: Awaitable {
    type Return = Unit;
    type Error = Unit;
}

extends Promise[T]: Awaitable {
    type Return = T;
    type Error = Unit;
}


extends test AsyncTask {
    overload read(file: File) -> Task[] {
        await block {
            print("async read: " + file.name)
        }
    }

    overload read(file: File) {
        print("sync read: " + file.name)
    }

    #test
    async test_read() {
        await read("test.txt");
        read("test.txt")

        let ptr = read // 智能派发指针
        ptr.invoke_await();
        ptr.invoke();
    }
}

