namespace std.image;

trait Image {
    type Pixel;
    get width: Integer;
    get height: Integer;
    get channels: Integer;
    get pixels(self) -> Integer {
        self.width * self.height * self.channels
    };
    get_channel(self, id: Integer) -> Matrix[Self::Pixel::Bit] {

    }
    set_channel(mut self, id: Integer, channel: Matrix[Self::Pixel::Bit]) {

    }
    get_pixel(self, x: Integer, y: Integer) -> Self::Pixel {

    }
    set_pixel(mut self, x: Integer, y: Integer, pixel: Self::Pixel) {
        image.get_pixel().mutable = pixel;
    }
}

trait Pixel {
    type Bits = f32;
    as_linear_rgba() -> RGBA;
}

class PNG {
    get bytes: [u8]
}

extends PNG {

}

class RGB8 {
    r: u8,
    g: u8,
    b: u8,
}

class RGBA8 {
    r: u8,
    g: u8,
    b: u8,
    a: u8,
}

class RGB565 {

}

/// rgb888
class RGB {
    r: f32,
    g: f32,
    b: f32,
    a: f32
}

#native(32bit)
class Rgb888 {

}

/// aka. linear rgba
class RGBA {
    r: f32,
    g: f32,
    b: f32,
    a: f32,
}

class XYZ {

}

#allow(non_upper_case)
class sRGBA {
    r: f32,
    g: f32,
    b: f32,
    a: f32,
    grammar: f32,
}

class RGBA8 {
    r: u8 = 0x11,
    g: u8,
    b: u8,
    a: u8
}

extends RGBA {
    into_grammar(r, g, b, a: f32 = 1.0, grammar = 2.2) -> sRGBA {

    }
}

let a = 123.4