namespace std.text;

using crate.bytes.{Endianess, LE};

#transparent type String = Utf8Buffer;

#native
#derive(Clone)
class UTF8Buffer {
    pointer: usize,
}

#native
extends Utf8Buffer: Constructor + TryFrom[Bytes] {
    Self(iter: Iterator[u8]) {
        new Self {
            // pointer: Vector::from_iterator(iter)
        }
    }
    // unsafe from_bytes(bytes: U8, order: Endianess = LE) {
    //     new Self {
    //
    //     }
    // }

    // LE
    try_from(bytes: Bytes) {

    }
}

// iterators
#native
extends Utf8Buffer {
    bytes() -> UTF8Bytes {
        ???
    }
    codepoints() -> UTF8CodePoints {
        ???
    }
    graphemes() -> UTF8Graphemes {
        ???
    }
}