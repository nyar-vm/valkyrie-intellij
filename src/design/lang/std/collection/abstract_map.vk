/// General method of table-like structure
trait AbstructMap<K, V> {
    def contains(self, key: K) -> bool;

    def get(self, key: K) -> bool;

    def insert(mut self, key: K, value: V) -> Optional<V>;

    def remove(mut self, key: K, value: V) -> Optional<V>;

    def count(self) -> Iterator<(K, V)> {
        self.pairs.count
    }

    def clear(self) -> Iterator<(K, V)>;

    def keys(self) -> Iterator<K>;

    def values(self) -> Iterator<V>;

    def iterator(self) -> Iterator<(K, V)>;
}
