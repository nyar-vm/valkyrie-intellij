/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.valkyrie.language;

import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.IntStack;
import com.intellij.lexer.FlexLexer;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.valkyrie.language.psi.ValkyrieTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Valkyrie.flex</tt>
 */
public class _ValkyrieLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ImportExport = 2;
  public static final int Let = 4;
  public static final int For = 6;
  public static final int Forall = 8;
  public static final int If = 10;
  public static final int Class = 12;
  public static final int StringInside = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17136 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\4\22\1\23\1\22\1\24\1\22\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32"+
    "\1\33\25\25\1\34\20\22\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\22\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\22\1\25\1\57\1\60\5\22\2\25"+
    "\1\61\7\22\1\25\1\62\20\22\1\25\1\63\1\22\1\64\13\25\1\65\1\25\1\66\22\22"+
    "\1\67\5\22\1\70\11\22\1\71\1\72\1\73\1\74\1\22\1\75\2\22\1\76\3\22\1\77\2"+
    "\22\1\100\10\22\123\25\1\101\7\25\1\102\1\103\12\25\1\104\24\22\1\25\1\105"+
    "\u0582\22\1\106\u017f\22");

  /* The ZZ_CMAP_Y table has 4544 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\3"+
    "\0\1\17\1\20\1\21\1\20\2\10\1\22\3\10\1\22\71\10\1\23\1\10\1\24\1\0\1\25\1"+
    "\26\2\0\16\27\1\30\1\31\1\32\1\33\2\10\1\34\11\10\1\35\21\10\1\36\1\37\24"+
    "\10\1\40\3\10\1\22\1\41\1\40\4\10\1\0\1\42\4\27\1\43\1\44\1\0\3\10\2\45\3"+
    "\0\1\27\1\46\5\10\1\47\3\27\1\50\1\51\13\10\1\52\1\53\1\54\1\55\1\27\1\56"+
    "\2\0\1\57\3\10\3\27\1\60\12\10\1\61\1\27\1\62\1\0\1\27\1\63\3\10\1\47\1\64"+
    "\1\20\2\10\1\61\1\65\1\66\1\67\2\0\3\10\1\70\10\0\2\10\1\30\1\71\2\0\1\72"+
    "\1\27\1\73\3\27\1\74\6\10\1\75\2\27\1\76\1\10\1\77\1\27\1\40\1\10\1\100\1"+
    "\101\1\102\2\10\1\103\1\104\1\105\1\53\1\106\1\107\1\110\1\77\1\27\1\24\1"+
    "\0\1\111\1\112\1\102\2\10\1\103\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\27\1\122\1\0\1\111\1\35\1\34\2\10\1\103\1\123\1\105\1\43\1\124\1\125\1"+
    "\0\1\77\1\27\1\0\1\41\1\111\1\101\1\102\2\10\1\103\1\123\1\105\1\53\1\116"+
    "\1\121\1\110\1\77\1\27\1\41\1\0\1\126\1\127\1\130\1\131\1\132\1\127\1\10\1"+
    "\133\1\134\1\135\1\136\1\0\1\121\1\27\2\0\1\137\1\30\1\103\2\10\1\103\1\10"+
    "\1\140\1\141\1\135\1\142\1\45\1\77\1\27\2\0\1\100\1\30\1\103\2\10\1\103\1"+
    "\143\1\105\1\141\1\135\1\142\1\144\1\77\1\27\1\145\1\0\1\111\1\30\1\103\4"+
    "\10\1\146\1\141\1\147\1\150\1\151\1\77\1\27\1\0\1\37\1\152\1\10\1\22\1\37"+
    "\2\10\1\34\1\153\1\22\1\154\1\155\1\27\1\121\1\27\1\156\1\0\1\40\5\10\1\157"+
    "\1\46\1\160\1\161\1\27\1\162\4\0\1\163\1\164\1\165\1\40\1\166\1\167\1\157"+
    "\1\170\1\171\1\172\1\27\1\173\4\0\1\125\2\0\1\162\1\27\1\162\1\174\1\175\1"+
    "\10\1\40\3\10\1\25\1\42\1\27\1\141\1\176\1\27\1\42\3\27\1\177\1\200\7\0\5"+
    "\10\1\47\1\27\1\201\1\27\1\162\1\61\1\202\1\203\1\204\1\205\1\10\1\206\1\207"+
    "\1\27\1\172\4\10\1\35\1\210\5\10\1\211\51\10\1\130\1\22\1\130\5\10\1\130\4"+
    "\10\1\130\1\22\1\130\1\10\1\22\7\10\1\130\10\10\1\212\1\0\1\42\1\162\1\0\2"+
    "\10\2\0\12\10\2\71\1\40\114\10\1\101\2\10\1\213\2\10\1\45\11\10\1\127\1\10"+
    "\1\125\1\10\1\30\1\214\1\0\2\10\1\214\1\0\2\10\1\215\1\0\1\10\1\30\1\216\1"+
    "\0\6\10\1\217\3\27\1\220\1\221\1\27\1\162\3\0\1\222\1\27\1\162\13\10\1\0\5"+
    "\10\1\223\10\10\1\71\1\0\3\10\1\22\1\27\1\224\1\27\1\224\1\121\1\27\3\10\1"+
    "\71\1\25\1\0\5\10\1\225\3\10\1\24\1\27\1\46\4\0\2\10\1\160\1\224\6\10\1\176"+
    "\1\161\3\27\1\53\1\27\1\162\1\27\1\162\1\151\1\0\1\27\1\172\10\0\1\226\5\10"+
    "\1\217\1\27\1\226\1\225\1\27\1\162\1\0\1\227\1\224\1\0\1\230\3\10\1\76\1\204"+
    "\1\27\1\63\4\10\1\61\1\27\1\224\1\0\4\10\1\217\2\27\1\0\1\27\1\231\1\27\1"+
    "\63\3\10\1\71\1\10\1\125\10\0\1\232\2\27\1\233\1\234\1\162\30\10\6\27\1\172"+
    "\1\227\42\10\2\71\4\10\2\71\1\10\1\235\3\10\1\71\6\10\1\30\1\171\1\236\1\25"+
    "\1\237\1\225\1\10\1\25\1\236\1\25\1\240\1\241\3\0\1\242\1\0\1\107\1\243\1"+
    "\0\1\244\1\245\2\0\1\41\1\151\2\0\1\10\1\25\6\0\1\27\1\177\1\246\1\27\1\243"+
    "\1\0\1\247\1\37\1\153\1\71\1\26\1\103\1\10\1\250\1\251\1\252\2\0\5\10\1\125"+
    "\16\0\1\253\5\0\1\254\6\0\1\255\162\0\5\10\1\22\5\10\1\22\20\10\1\25\1\256"+
    "\1\257\1\0\4\10\1\35\1\210\7\10\1\151\1\0\1\107\2\10\1\22\1\0\10\22\4\27\1"+
    "\260\3\0\1\40\1\206\1\261\1\25\1\40\11\10\1\22\1\262\1\40\12\10\1\211\1\251"+
    "\4\10\1\71\1\40\12\10\1\22\2\0\3\10\1\45\6\0\170\10\1\71\11\0\72\10\1\71\5"+
    "\0\21\10\1\25\10\0\5\10\1\71\41\10\1\25\2\10\1\27\1\257\2\0\5\10\1\160\1\72"+
    "\1\263\3\10\1\61\12\10\1\162\3\0\1\151\1\10\1\37\14\10\1\102\3\10\1\22\1\10"+
    "\7\0\1\151\1\10\1\264\1\265\2\10\1\47\3\0\6\10\1\225\1\0\1\63\5\10\1\217\1"+
    "\27\1\172\1\0\1\27\1\162\2\27\1\63\1\266\1\27\1\63\2\10\1\61\1\172\2\10\1"+
    "\160\1\27\1\224\1\0\3\10\1\25\1\74\5\10\1\47\1\27\1\243\1\151\1\27\1\162\1"+
    "\267\1\10\1\27\1\270\5\10\1\76\1\161\1\0\1\265\1\271\1\27\1\162\2\10\1\22"+
    "\1\272\6\10\1\203\1\273\1\223\2\0\1\274\1\10\1\47\1\275\1\0\3\276\1\0\2\22"+
    "\5\10\1\211\1\71\1\0\16\10\1\47\1\277\1\27\1\162\64\10\1\225\1\0\2\10\1\22"+
    "\1\300\5\10\1\225\40\0\55\10\1\71\15\10\1\24\4\0\1\22\1\0\1\300\1\301\1\10"+
    "\1\103\1\22\1\171\1\302\15\10\1\24\3\0\1\300\20\10\1\71\1\165\32\10\1\71\2"+
    "\0\10\10\1\37\6\10\5\0\1\10\1\24\2\27\2\0\2\27\1\303\2\0\1\304\4\0\1\305\1"+
    "\235\17\10\1\25\2\0\1\27\1\162\1\40\2\10\1\306\1\40\2\10\1\45\1\307\6\10\1"+
    "\61\3\10\1\22\3\37\1\310\4\0\1\10\1\143\2\10\1\22\2\10\1\311\1\10\1\71\1\10"+
    "\1\71\4\0\17\10\1\45\10\0\6\10\1\25\20\0\1\312\20\0\3\10\1\25\6\10\1\125\1"+
    "\0\1\243\3\0\4\10\2\0\3\10\1\45\4\10\1\61\1\46\3\10\1\71\4\10\1\225\1\10\1"+
    "\261\5\0\23\10\1\71\1\27\1\162\4\10\1\225\4\10\1\225\5\10\1\0\6\10\1\225\23"+
    "\0\46\10\1\22\1\0\2\10\1\71\1\0\1\10\23\0\1\71\1\103\4\10\1\35\1\313\2\10"+
    "\1\71\1\0\2\10\1\22\1\0\3\10\1\22\10\0\2\10\1\314\1\0\2\10\1\71\1\0\3\10\1"+
    "\24\10\0\7\10\1\307\10\0\1\315\1\72\1\143\1\40\2\10\1\225\1\115\4\0\3\10\1"+
    "\25\3\10\1\25\4\0\1\10\1\40\2\10\1\316\3\0\6\10\1\71\1\0\2\10\1\71\1\0\2\10"+
    "\1\45\1\0\2\10\1\24\15\0\11\10\1\125\6\0\6\10\1\45\1\0\6\10\1\45\41\0\1\230"+
    "\6\10\1\27\1\161\3\0\1\121\1\27\1\0\1\107\1\230\5\10\1\27\1\46\2\0\3\10\1"+
    "\125\1\27\1\162\1\230\3\10\1\160\1\27\1\141\1\27\2\0\4\10\1\317\1\0\1\230"+
    "\5\10\1\47\1\27\1\320\1\321\1\27\1\322\4\0\2\10\1\34\2\10\1\217\1\27\1\200"+
    "\10\0\1\22\1\323\1\10\1\35\1\10\1\125\5\10\1\160\1\27\1\46\1\27\1\162\1\137"+
    "\1\101\1\102\2\10\1\103\1\123\1\105\1\53\1\116\1\136\1\251\1\77\2\177\21\0"+
    "\6\10\1\176\1\27\1\201\1\45\1\27\1\162\4\0\6\10\2\27\1\324\1\0\1\27\1\162"+
    "\24\0\5\10\1\160\1\172\1\27\1\243\2\0\1\271\4\0\6\10\2\27\1\325\1\0\1\27\1"+
    "\162\4\0\5\10\1\47\1\27\1\0\1\27\1\162\6\0\3\10\1\326\1\27\1\224\1\27\1\162"+
    "\54\0\10\10\1\27\1\162\1\0\1\151\70\0\7\10\1\125\40\0\1\10\1\103\3\10\1\160"+
    "\1\161\1\27\1\125\1\0\1\27\1\162\2\0\1\37\3\10\1\327\2\27\1\42\1\161\51\0"+
    "\63\10\1\24\14\0\15\10\1\22\2\0\30\10\1\225\27\0\5\10\1\22\72\0\10\10\1\22"+
    "\67\0\7\10\1\125\3\10\1\22\1\27\1\162\14\0\3\10\1\71\1\177\1\0\6\10\1\161"+
    "\1\0\1\225\1\0\1\27\1\162\1\300\2\10\1\251\2\10\56\0\10\10\1\25\1\0\1\76\4"+
    "\27\1\161\1\0\1\107\1\230\1\10\10\0\1\125\3\0\75\10\1\25\2\0\36\10\1\45\41"+
    "\0\1\24\77\0\15\10\1\45\1\10\1\25\1\10\1\125\1\10\1\330\130\0\1\304\1\331"+
    "\1\46\1\227\1\332\1\224\3\0\1\333\22\0\1\321\67\0\12\10\1\30\10\10\1\30\1"+
    "\334\1\335\1\10\1\336\1\143\7\10\1\35\1\337\2\30\3\10\1\340\1\171\1\37\1\103"+
    "\51\10\1\71\3\10\1\103\2\10\1\211\3\10\1\211\2\10\1\30\3\10\1\30\2\10\1\22"+
    "\3\10\1\22\3\10\1\103\3\10\1\103\2\10\1\211\1\341\14\27\1\161\1\227\5\27\1"+
    "\177\1\312\1\0\1\244\2\0\1\227\1\42\1\27\52\0\1\161\2\27\1\342\1\343\1\46"+
    "\72\0\30\10\1\25\1\0\1\161\5\0\10\10\1\217\1\46\1\27\1\162\24\0\1\143\3\10"+
    "\1\163\1\40\1\211\1\344\1\247\1\345\1\163\1\235\1\163\2\211\1\120\1\10\1\34"+
    "\1\10\1\225\1\346\1\34\1\10\1\225\50\0\32\10\1\22\5\0\106\10\1\25\1\0\33\10"+
    "\1\71\120\10\1\24\53\0\3\10\1\71\134\0\36\27\2\0");

  /* The ZZ_CMAP_A table has 1848 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\3\2\10\1\3\2\0\1\1\1\61\1\103\1\74\1\72\1\0\1\75\1\102\1\51\1"+
    "\52\1\47\1\100\1\77\1\101\1\17\1\2\1\11\11\14\1\70\1\50\1\62\1\55\1\64\1\76"+
    "\1\73\1\13\1\15\3\13\1\15\10\4\1\12\10\4\1\12\2\4\1\53\1\7\1\54\1\66\1\16"+
    "\1\6\1\33\1\57\1\35\1\36\1\25\1\24\1\60\1\31\1\23\2\4\1\26\1\32\1\37\1\45"+
    "\1\41\1\4\1\44\1\27\1\34\1\20\1\46\1\30\1\42\1\40\1\4\1\21\1\71\1\22\7\0\1"+
    "\10\2\0\1\1\11\0\1\4\12\0\1\4\1\0\1\5\7\4\1\0\2\4\4\0\4\4\6\0\5\4\7\0\1\4"+
    "\1\0\1\4\1\0\10\5\5\4\1\0\2\4\3\0\3\4\1\0\1\4\6\0\1\4\1\5\3\4\1\0\1\4\1\0"+
    "\4\4\1\0\13\4\1\0\3\4\1\0\5\5\2\0\6\4\1\0\7\4\1\0\1\4\7\0\15\5\1\0\1\5\1\0"+
    "\2\5\1\0\2\5\1\0\1\5\3\4\5\0\3\5\5\0\3\4\7\5\4\0\2\4\1\5\13\4\1\0\1\4\7\5"+
    "\2\0\6\5\2\4\2\5\1\0\4\5\2\4\2\5\3\4\2\0\2\4\1\5\6\4\3\5\2\0\11\4\3\5\1\4"+
    "\6\0\2\5\6\4\4\5\2\4\2\0\2\5\1\4\11\5\1\4\3\5\1\4\5\5\2\0\1\4\3\5\4\0\6\4"+
    "\6\0\6\5\1\0\11\5\6\4\3\5\1\4\2\5\1\4\7\5\2\4\2\5\2\0\2\5\1\4\3\5\1\0\10\4"+
    "\2\0\2\4\2\0\6\4\1\0\7\4\1\0\1\4\3\0\4\4\2\0\1\5\1\4\3\5\2\0\3\5\1\4\10\0"+
    "\1\5\4\0\2\4\1\0\1\4\1\0\3\5\1\0\6\4\4\0\2\4\1\0\2\4\1\0\2\4\1\0\2\4\2\0\1"+
    "\5\1\0\5\5\4\0\2\5\2\0\3\5\3\0\1\5\7\0\4\4\1\0\1\4\7\0\4\5\3\4\1\5\2\0\1\4"+
    "\1\0\2\4\1\0\3\4\2\5\1\0\3\5\2\0\1\4\11\0\1\5\1\4\1\0\6\4\3\0\3\4\1\0\4\4"+
    "\3\0\2\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0\2\4\4\0\5\5\3\0\3\5\1\0\4\5\2\0\1\4\6"+
    "\0\5\5\1\0\5\4\3\0\1\4\7\5\1\0\2\5\5\0\2\5\1\0\4\4\1\0\3\4\6\0\1\4\2\0\2\4"+
    "\5\0\3\4\2\0\1\4\3\5\1\0\4\5\1\4\5\0\3\4\1\5\7\0\1\4\2\0\2\5\1\0\7\4\1\0\1"+
    "\4\4\0\1\5\4\0\6\5\1\0\1\5\3\0\2\5\4\0\1\4\1\5\1\4\5\5\7\4\10\5\1\0\2\5\7"+
    "\0\2\4\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\3\4\2\5\1\0\2\5\1\4\2\0\5\4\1\0\1\4\1\0\6\5\2\0\2\5\2\0\4\4\5\0\1"+
    "\5\1\0\1\5\1\0\1\5\4\0\2\5\5\4\10\5\11\0\1\5\1\0\7\5\1\4\2\5\4\4\3\5\1\4\3"+
    "\5\2\4\7\5\3\4\4\5\5\4\14\5\1\4\1\5\5\0\1\4\2\0\3\4\1\0\7\4\2\0\3\5\1\1\11"+
    "\4\3\5\3\0\2\4\2\5\4\0\1\4\1\0\2\5\4\0\4\4\10\5\3\0\1\4\4\0\1\4\1\5\5\0\3"+
    "\5\2\0\1\4\1\5\1\4\5\0\4\5\4\0\4\4\4\0\5\5\3\4\3\0\10\5\5\4\2\5\3\0\3\4\3"+
    "\5\1\0\5\5\4\4\1\5\4\4\3\5\2\4\2\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\2\0\3\4\1\0"+
    "\6\4\2\0\2\4\13\1\5\0\2\10\5\0\1\1\1\5\13\0\1\5\12\0\1\1\1\0\1\5\3\0\3\5\2"+
    "\0\1\4\4\0\3\4\2\0\4\4\5\0\5\4\4\0\1\4\1\0\1\56\2\0\1\43\13\0\1\67\2\0\1\63"+
    "\1\65\7\0\4\4\3\5\2\4\4\0\1\1\4\0\3\4\1\0\5\4\3\0\2\5\2\0\3\4\6\5\1\0\3\4"+
    "\1\5\3\4\1\5\4\4\1\5\4\4\3\0\1\4\1\0\1\4\2\0\5\4\1\5\2\4\2\5\5\4\1\0\4\4\2"+
    "\5\4\0\1\4\3\5\2\4\1\5\5\4\2\5\3\0\3\4\4\0\3\4\2\5\2\0\6\4\1\0\3\5\1\0\2\5"+
    "\5\0\5\4\5\0\1\4\1\5\3\4\1\0\2\4\1\0\2\4\3\0\2\5\10\0\3\5\1\0\1\4\1\0\1\4"+
    "\3\0\4\4\4\0\1\5\6\0\2\4\2\0\3\4\3\0\3\4\1\0\2\4\1\0\1\4\5\0\1\5\2\0\1\4\3"+
    "\0\1\4\2\0\4\4\1\0\2\4\2\0\1\4\3\5\1\0\2\5\1\0\5\4\2\5\1\0\3\4\1\5\2\0\1\4"+
    "\1\0\1\5\4\4\5\0\3\5\3\0\2\5\1\4\1\0\1\4\3\0\1\4\1\0\4\4\1\0\1\4\4\5\2\4\1"+
    "\0\1\4\1\5\3\0\1\4\3\0\2\4\3\0\3\5\2\0\6\5\2\4\3\0\2\5\1\0\2\5\3\0\6\5\2\0"+
    "\3\5\2\0\4\5\4\0\1\4\2\0\2\4\2\0\4\4\1\0\4\4\1\0\1\4\1\0\6\4\2\0\5\4\1\0\4"+
    "\4\1\0\4\4\2\0\3\5\2\0\7\5\1\0\2\5\1\0\2\5\1\0\1\4\1\0\1\4\5\0\1\4\1\0\1\4"+
    "\1\0\3\4\1\0\3\4\1\0\3\4");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\1\1\3\1\1\2\4\1\5"+
    "\1\6\1\7\13\3\1\10\1\3\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\3\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\2\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\3\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\2\3\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\2\64\1\65\5\0\1\4\1\66"+
    "\1\67\2\3\1\70\16\3\1\71\1\3\1\72\1\3"+
    "\1\73\1\3\1\65\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\2\3\1\102\5\3\1\103\6\3\1\70\1\3"+
    "\1\103\3\3\1\10\2\3\1\104\1\105\7\3\1\106"+
    "\6\3\1\107\7\3\1\110\1\111\1\3\1\112\5\3"+
    "\1\113\1\17\1\114\2\3\1\115\1\56\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0220\0\u0220\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594"+
    "\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u0220\0\u072c\0\u0220"+
    "\0\u0220\0\u0220\0\u0220\0\u0220\0\u0770\0\u0220\0\u07b4\0\u07f8"+
    "\0\u083c\0\u0220\0\u0880\0\u0220\0\u0220\0\u0220\0\u08c4\0\u0220"+
    "\0\u0220\0\u0220\0\u0220\0\u0220\0\u0220\0\u0220\0\u0220\0\u0220"+
    "\0\u0908\0\u094c\0\u0220\0\u0220\0\u0220\0\u0220\0\u0220\0\u0220"+
    "\0\u0990\0\u0220\0\u0220\0\u0220\0\u0220\0\u0220\0\u0770\0\u09d4"+
    "\0\u0a18\0\u0220\0\u0220\0\u0220\0\u0220\0\u0220\0\u0a5c\0\u0aa0"+
    "\0\u0ae4\0\u0b28\0\u0330\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c"+
    "\0\u0cc0\0\u02ec\0\u0d04\0\u0d48\0\u02ec\0\u0d8c\0\u0dd0\0\u0e14"+
    "\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034"+
    "\0\u1078\0\u10bc\0\u1100\0\u0220\0\u1144\0\u0220\0\u1188\0\u02ec"+
    "\0\u11cc\0\u1210\0\u1254\0\u1298\0\u0c38\0\u0220\0\u0220\0\u0220"+
    "\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8"+
    "\0\u02ec\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694"+
    "\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u02ec\0\u182c\0\u1870"+
    "\0\u02ec\0\u02ec\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08"+
    "\0\u1a4c\0\u02ec\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4"+
    "\0\u02ec\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0"+
    "\0\u02ec\0\u02ec\0\u1e04\0\u02ec\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14"+
    "\0\u1f58\0\u02ec\0\u02ec\0\u02ec\0\u1f9c\0\u1fe0\0\u02ec\0\u02ec"+
    "\0\u2024";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\12\1\14\1\11\1\15\1\11"+
    "\1\12\1\16\2\14\1\17\2\14\1\20\1\14\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\14"+
    "\1\31\1\14\1\32\1\33\1\34\2\14\1\35\1\14"+
    "\1\36\2\14\1\37\1\11\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\14\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\11\1\12\1\13\1\12\1\14\1\11\1\15\1\11"+
    "\1\12\1\16\2\14\1\17\2\14\1\20\1\14\1\73"+
    "\1\74\20\14\1\11\3\14\1\75\1\76\1\41\1\42"+
    "\1\43\1\44\1\45\1\11\2\14\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\3\11\1\12"+
    "\1\13\1\12\1\14\1\11\1\15\1\11\1\12\1\16"+
    "\2\14\1\17\2\14\1\20\1\14\1\77\1\100\12\14"+
    "\1\101\5\14\1\11\3\14\1\11\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\11\2\14\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\3\11\1\12"+
    "\1\13\1\12\1\14\1\11\1\15\1\11\1\12\1\16"+
    "\2\14\1\17\2\14\1\20\1\14\1\77\1\100\1\110"+
    "\11\14\1\101\5\14\1\11\3\14\1\11\1\40\1\103"+
    "\1\104\1\105\1\106\1\45\1\11\2\14\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\3\11"+
    "\1\12\1\13\1\12\1\14\1\11\1\15\1\11\1\12"+
    "\1\16\2\14\1\17\2\14\1\20\1\14\1\21\1\22"+
    "\2\14\1\111\15\14\1\112\3\14\1\11\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\11\2\14\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\107\11"+
    "\1\12\1\13\1\12\1\14\1\11\1\15\1\11\1\12"+
    "\1\16\2\14\1\17\2\14\1\20\1\14\1\113\1\114"+
    "\20\14\1\11\3\14\1\11\1\40\1\115\1\116\1\43"+
    "\1\44\1\45\1\11\2\14\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\2\11\102\117\1\120"+
    "\1\121\105\0\1\12\1\0\1\12\4\0\1\12\75\0"+
    "\1\122\105\0\2\14\3\0\6\14\1\0\1\14\2\0"+
    "\20\14\1\0\3\14\10\0\2\14\23\0\6\123\1\75"+
    "\1\124\74\123\11\0\1\125\1\126\1\0\1\125\1\126"+
    "\1\0\1\127\4\0\1\126\15\0\1\126\2\0\1\126"+
    "\11\0\1\126\35\0\1\17\2\0\1\17\1\0\1\130"+
    "\1\127\103\0\1\131\70\0\2\14\3\0\6\14\1\0"+
    "\1\14\2\0\1\14\1\132\5\14\1\133\10\14\1\0"+
    "\3\14\10\0\2\14\27\0\2\14\3\0\6\14\1\0"+
    "\1\134\2\0\14\14\1\135\3\14\1\0\1\14\1\136"+
    "\1\14\10\0\2\14\27\0\2\14\3\0\6\14\1\0"+
    "\1\14\2\0\3\14\1\137\10\14\1\140\2\14\1\141"+
    "\1\0\3\14\10\0\2\14\27\0\2\14\3\0\6\14"+
    "\1\0\1\14\2\0\2\14\1\142\15\14\1\0\3\14"+
    "\10\0\2\14\27\0\2\14\3\0\6\14\1\0\1\14"+
    "\2\0\11\14\1\143\6\14\1\0\3\14\10\0\2\14"+
    "\27\0\2\14\3\0\6\14\1\0\1\14\2\0\6\14"+
    "\1\144\11\14\1\0\3\14\10\0\2\14\27\0\2\14"+
    "\3\0\6\14\1\0\1\14\2\0\10\14\1\145\7\14"+
    "\1\0\3\14\10\0\2\14\27\0\2\14\3\0\6\14"+
    "\1\0\1\14\2\0\10\14\1\146\4\14\1\147\2\14"+
    "\1\0\3\14\10\0\2\14\27\0\2\14\3\0\6\14"+
    "\1\0\1\14\2\0\3\14\1\150\14\14\1\0\3\14"+
    "\10\0\2\14\27\0\2\14\3\0\6\14\1\0\1\14"+
    "\2\0\2\14\1\151\15\14\1\0\3\14\10\0\2\14"+
    "\27\0\2\14\3\0\6\14\1\0\1\14\2\0\20\14"+
    "\1\0\1\152\2\14\10\0\2\14\27\0\2\14\3\0"+
    "\6\14\1\0\1\14\2\0\10\14\1\153\7\14\1\0"+
    "\3\14\10\0\2\14\100\0\1\154\32\0\2\14\3\0"+
    "\6\14\1\0\1\14\2\0\1\155\17\14\1\0\3\14"+
    "\10\0\2\14\100\0\1\156\110\0\1\52\105\0\1\54"+
    "\107\0\1\56\115\0\1\71\104\0\1\72\4\0\2\14"+
    "\3\0\6\14\1\0\1\14\2\0\10\14\1\157\7\14"+
    "\1\0\3\14\10\0\2\14\27\0\2\14\3\0\6\14"+
    "\1\0\1\14\2\0\14\14\1\160\3\14\1\0\3\14"+
    "\10\0\2\14\27\0\2\14\3\0\6\14\1\0\1\14"+
    "\2\0\17\14\1\161\1\0\3\14\10\0\2\14\23\0"+
    "\102\117\104\0\1\120\104\0\1\121\2\162\1\163\1\0"+
    "\100\162\3\123\1\0\4\123\1\0\73\123\11\0\1\125"+
    "\2\0\1\125\2\0\1\127\75\0\1\164\1\0\3\164"+
    "\6\0\2\164\5\0\1\164\1\0\2\164\20\0\1\164"+
    "\35\0\1\165\2\0\1\165\100\0\1\130\2\0\1\130"+
    "\1\0\1\130\104\0\1\166\35\0\1\167\4\0\1\170"+
    "\25\0\2\14\3\0\6\14\1\0\1\14\2\0\16\14"+
    "\1\171\1\14\1\0\3\14\10\0\2\14\27\0\2\14"+
    "\3\0\6\14\1\0\1\14\2\0\14\14\1\172\3\14"+
    "\1\0\3\14\10\0\2\14\27\0\2\14\3\0\6\14"+
    "\1\0\1\14\2\0\20\14\1\0\1\173\2\14\10\0"+
    "\2\14\27\0\2\14\3\0\6\14\1\0\1\14\2\0"+
    "\4\14\1\174\13\14\1\0\3\14\10\0\2\14\27\0"+
    "\2\14\3\0\6\14\1\0\1\175\2\0\20\14\1\0"+
    "\3\14\10\0\2\14\27\0\2\14\3\0\6\14\1\0"+
    "\1\14\2\0\1\176\10\14\1\177\4\14\1\200\1\14"+
    "\1\0\3\14\10\0\2\14\27\0\2\14\3\0\6\14"+
    "\1\0\1\14\2\0\11\14\1\201\6\14\1\0\3\14"+
    "\10\0\2\14\27\0\2\14\3\0\6\14\1\0\1\14"+
    "\2\0\20\14\1\0\1\202\2\14\10\0\2\14\27\0"+
    "\2\14\3\0\6\14\1\0\1\14\2\0\1\203\17\14"+
    "\1\0\3\14\10\0\2\14\27\0\2\14\3\0\6\14"+
    "\1\0\1\14\2\0\11\14\1\204\6\14\1\0\3\14"+
    "\10\0\2\14\27\0\2\14\3\0\6\14\1\0\1\14"+
    "\2\0\20\14\1\0\3\14\10\0\1\14\1\205\27\0"+
    "\2\14\3\0\6\14\1\0\1\14\2\0\16\14\1\206"+
    "\1\14\1\0\3\14\10\0\2\14\27\0\2\14\3\0"+
    "\6\14\1\0\1\14\2\0\10\14\1\207\7\14\1\0"+
    "\3\14\10\0\2\14\27\0\2\14\3\0\6\14\1\0"+
    "\1\14\2\0\1\14\1\210\16\14\1\0\3\14\10\0"+
    "\2\14\27\0\2\14\3\0\6\14\1\0\1\14\2\0"+
    "\20\14\1\0\1\14\1\211\1\14\10\0\2\14\27\0"+
    "\2\14\3\0\6\14\1\0\1\14\2\0\3\14\1\201"+
    "\14\14\1\0\1\212\2\14\10\0\2\14\27\0\2\14"+
    "\3\0\6\14\1\0\1\14\2\0\11\14\1\213\6\14"+
    "\1\0\3\14\10\0\2\14\27\0\2\14\3\0\6\14"+
    "\1\0\1\14\2\0\4\14\1\214\13\14\1\0\3\14"+
    "\10\0\2\14\27\0\2\14\3\0\6\14\1\0\1\14"+
    "\2\0\1\215\17\14\1\0\3\14\10\0\2\14\23\0"+
    "\3\162\1\0\100\162\3\163\1\0\100\163\11\0\1\164"+
    "\1\0\4\164\5\0\2\164\5\0\1\164\1\0\2\164"+
    "\20\0\1\164\30\0\2\14\3\0\6\14\1\0\1\14"+
    "\2\0\3\14\1\216\14\14\1\0\1\14\1\217\1\14"+
    "\10\0\2\14\27\0\2\14\3\0\6\14\1\0\1\14"+
    "\2\0\12\14\1\135\5\14\1\0\3\14\10\0\2\14"+
    "\27\0\2\14\3\0\6\14\1\0\1\14\2\0\10\14"+
    "\1\220\7\14\1\0\3\14\10\0\2\14\27\0\2\14"+
    "\3\0\6\14\1\0\1\14\2\0\2\14\1\221\15\14"+
    "\1\0\3\14\10\0\2\14\27\0\2\14\3\0\6\14"+
    "\1\0\1\14\2\0\7\14\1\222\10\14\1\0\3\14"+
    "\10\0\2\14\27\0\2\14\3\0\6\14\1\0\1\14"+
    "\2\0\4\14\1\223\13\14\1\0\3\14\10\0\2\14"+
    "\27\0\2\14\3\0\6\14\1\0\1\14\2\0\2\14"+
    "\1\224\15\14\1\0\3\14\10\0\2\14\27\0\2\14"+
    "\3\0\6\14\1\0\1\14\2\0\20\14\1\0\1\14"+
    "\1\225\1\14\10\0\2\14\27\0\2\14\3\0\6\14"+
    "\1\0\1\226\2\0\20\14\1\0\3\14\10\0\2\14"+
    "\27\0\2\14\3\0\6\14\1\0\1\14\2\0\3\14"+
    "\1\227\14\14\1\0\3\14\10\0\2\14\27\0\2\14"+
    "\3\0\6\14\1\0\1\14\2\0\12\14\1\230\5\14"+
    "\1\0\3\14\10\0\2\14\27\0\2\14\3\0\6\14"+
    "\1\0\1\14\2\0\20\14\1\0\3\14\10\0\1\14"+
    "\1\231\27\0\2\14\3\0\6\14\1\0\1\14\2\0"+
    "\2\14\1\232\15\14\1\0\3\14\10\0\2\14\27\0"+
    "\2\14\3\0\6\14\1\0\1\14\2\0\4\14\1\233"+
    "\13\14\1\0\3\14\10\0\2\14\27\0\2\14\3\0"+
    "\6\14\1\0\1\14\2\0\1\234\17\14\1\0\3\14"+
    "\10\0\2\14\27\0\2\14\3\0\6\14\1\0\1\14"+
    "\2\0\20\14\1\0\2\14\1\235\10\0\2\14\27\0"+
    "\2\14\3\0\6\14\1\0\1\14\2\0\1\236\17\14"+
    "\1\0\3\14\10\0\2\14\27\0\2\14\3\0\6\14"+
    "\1\0\1\14\2\0\1\14\1\237\2\14\1\240\13\14"+
    "\1\0\3\14\10\0\2\14\27\0\2\14\3\0\6\14"+
    "\1\0\1\14\2\0\2\14\1\241\15\14\1\0\3\14"+
    "\10\0\2\14\27\0\2\14\3\0\6\14\1\0\1\14"+
    "\2\0\4\14\1\242\13\14\1\0\3\14\10\0\2\14"+
    "\27\0\2\14\3\0\6\14\1\0\1\14\2\0\20\14"+
    "\1\0\1\243\2\14\10\0\2\14\27\0\2\14\3\0"+
    "\6\14\1\0\1\14\2\0\3\14\1\244\14\14\1\0"+
    "\3\14\10\0\2\14\27\0\2\14\3\0\6\14\1\0"+
    "\1\14\2\0\11\14\1\245\6\14\1\0\3\14\10\0"+
    "\2\14\27\0\2\14\3\0\6\14\1\0\1\14\2\0"+
    "\14\14\1\246\3\14\1\0\3\14\10\0\2\14\27\0"+
    "\2\14\3\0\6\14\1\0\1\14\2\0\20\14\1\0"+
    "\1\247\2\14\10\0\2\14\27\0\2\14\3\0\6\14"+
    "\1\0\1\14\2\0\12\14\1\250\5\14\1\0\3\14"+
    "\10\0\2\14\27\0\2\14\3\0\6\14\1\0\1\14"+
    "\2\0\2\14\1\251\15\14\1\0\3\14\10\0\2\14"+
    "\27\0\2\14\3\0\6\14\1\0\1\14\2\0\6\14"+
    "\1\252\11\14\1\0\3\14\10\0\2\14\27\0\2\14"+
    "\3\0\6\14\1\0\1\14\2\0\2\14\1\253\15\14"+
    "\1\0\3\14\10\0\2\14\27\0\2\14\3\0\6\14"+
    "\1\0\1\14\2\0\4\14\1\254\13\14\1\0\3\14"+
    "\10\0\2\14\27\0\2\14\3\0\6\14\1\0\1\14"+
    "\2\0\14\14\1\255\3\14\1\0\3\14\10\0\2\14"+
    "\27\0\2\14\3\0\6\14\1\0\1\14\2\0\2\14"+
    "\1\245\15\14\1\0\3\14\10\0\2\14\27\0\2\14"+
    "\3\0\6\14\1\0\1\14\2\0\10\14\1\256\7\14"+
    "\1\0\3\14\10\0\2\14\27\0\2\14\3\0\6\14"+
    "\1\0\1\14\2\0\3\14\1\257\14\14\1\0\3\14"+
    "\10\0\2\14\27\0\2\14\3\0\6\14\1\0\1\14"+
    "\2\0\2\14\1\260\15\14\1\0\3\14\10\0\2\14"+
    "\27\0\2\14\3\0\6\14\1\0\1\14\2\0\11\14"+
    "\1\261\6\14\1\0\3\14\10\0\2\14\27\0\2\14"+
    "\3\0\6\14\1\0\1\14\2\0\11\14\1\262\6\14"+
    "\1\0\3\14\10\0\2\14\27\0\2\14\3\0\6\14"+
    "\1\0\1\14\2\0\3\14\1\263\14\14\1\0\3\14"+
    "\10\0\2\14\27\0\2\14\3\0\6\14\1\0\1\14"+
    "\2\0\4\14\1\216\13\14\1\0\3\14\10\0\2\14"+
    "\27\0\2\14\3\0\6\14\1\0\1\14\2\0\13\14"+
    "\1\245\4\14\1\0\3\14\10\0\2\14\27\0\2\14"+
    "\3\0\6\14\1\0\1\14\2\0\11\14\1\264\6\14"+
    "\1\0\3\14\10\0\2\14\27\0\2\14\3\0\6\14"+
    "\1\0\1\14\2\0\11\14\1\254\6\14\1\0\3\14"+
    "\10\0\2\14\27\0\2\14\3\0\6\14\1\0\1\14"+
    "\2\0\13\14\1\222\4\14\1\0\3\14\10\0\2\14"+
    "\27\0\2\14\3\0\6\14\1\0\1\14\2\0\2\14"+
    "\1\135\15\14\1\0\3\14\10\0\2\14\27\0\2\14"+
    "\3\0\6\14\1\0\1\14\2\0\14\14\1\265\3\14"+
    "\1\0\3\14\10\0\2\14\27\0\2\14\3\0\6\14"+
    "\1\0\1\14\2\0\10\14\1\266\7\14\1\0\3\14"+
    "\10\0\2\14\27\0\2\14\3\0\6\14\1\0\1\14"+
    "\2\0\11\14\1\267\6\14\1\0\3\14\10\0\2\14"+
    "\27\0\2\14\3\0\6\14\1\0\1\14\2\0\4\14"+
    "\1\270\13\14\1\0\3\14\10\0\2\14\27\0\2\14"+
    "\3\0\6\14\1\0\1\14\2\0\11\14\1\222\6\14"+
    "\1\0\3\14\10\0\2\14\27\0\2\14\3\0\6\14"+
    "\1\0\1\14\2\0\20\14\1\0\3\14\10\0\1\14"+
    "\1\271\27\0\2\14\3\0\6\14\1\0\1\14\2\0"+
    "\4\14\1\267\13\14\1\0\3\14\10\0\2\14\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8296];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\7\1\2\11\13\1\1\11\1\1\5\11"+
    "\1\1\1\11\3\1\1\11\1\1\3\11\1\1\11\11"+
    "\2\1\6\11\1\1\5\11\3\1\5\11\4\1\5\0"+
    "\24\1\1\11\1\1\1\11\7\1\3\11\101\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
private static int let_balance = 0;
private static boolean case_appearence = false;
private static String quote_balance = "";
private static IntStack brace_stack = new IntStack(9);

public _ValkyrieLexer() {
    this((java.io.Reader)null);
    init();
}
private static void init() {
    let_balance = 0;
    case_appearence = false;
    quote_balance = "";
    brace_stack.clear();
}
public void brace_block(int state) {
    brace_stack.push(state);
    yybegin(state);
}

public void brace_recover() {
    if (brace_stack.size() == 0) {
        yybegin(YYINITIAL);
    }
    else if (brace_stack.size() == 1) {
        brace_stack.pop();
        yybegin(YYINITIAL);
    }
    else {
        brace_stack.pop();
        yybegin(brace_stack.peek());
    }
}
public void match_indent() {
    // length may < indent_balance
    // t = yytext().length() - indent_balance - Length of Newline
    // yypushback(t);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ValkyrieLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        init();

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 78: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 79: break;
          case 3: 
            { return SYMBOL_XID;
            } 
            // fall through
          case 80: break;
          case 4: 
            { return INTEGER;
            } 
            // fall through
          case 81: break;
          case 5: 
            { return DOT;
            } 
            // fall through
          case 82: break;
          case 6: 
            { return BRACE_L;
            } 
            // fall through
          case 83: break;
          case 7: 
            { return BRACE_R;
            } 
            // fall through
          case 84: break;
          case 8: 
            { return EXTENDS;
            } 
            // fall through
          case 85: break;
          case 9: 
            { return SEMICOLON;
            } 
            // fall through
          case 86: break;
          case 10: 
            { return PARENTHESIS_L;
            } 
            // fall through
          case 87: break;
          case 11: 
            { return PARENTHESIS_R;
            } 
            // fall through
          case 88: break;
          case 12: 
            { return BRACKET_L;
            } 
            // fall through
          case 89: break;
          case 13: 
            { return BRACKET_R;
            } 
            // fall through
          case 90: break;
          case 14: 
            { return BIND;
            } 
            // fall through
          case 91: break;
          case 15: 
            { yybegin(Forall);
    return FORALL;
            } 
            // fall through
          case 92: break;
          case 16: 
            { return BANG;
            } 
            // fall through
          case 93: break;
          case 17: 
            { return ANGLE_L;
            } 
            // fall through
          case 94: break;
          case 18: 
            { return LESS;
            } 
            // fall through
          case 95: break;
          case 19: 
            { return ANGLE_R;
            } 
            // fall through
          case 96: break;
          case 20: 
            { return GREATER;
            } 
            // fall through
          case 97: break;
          case 21: 
            { return ACCENT;
            } 
            // fall through
          case 98: break;
          case 22: 
            { return PROPORTION;
            } 
            // fall through
          case 99: break;
          case 23: 
            { return COLON;
            } 
            // fall through
          case 100: break;
          case 24: 
            { return VERTICAL;
            } 
            // fall through
          case 101: break;
          case 25: 
            { return DOLLAR;
            } 
            // fall through
          case 102: break;
          case 26: 
            { return AT;
            } 
            // fall through
          case 103: break;
          case 27: 
            { return HASH;
            } 
            // fall through
          case 104: break;
          case 28: 
            { return AMP;
            } 
            // fall through
          case 105: break;
          case 29: 
            { return QUESTION ;
            } 
            // fall through
          case 106: break;
          case 30: 
            { return COMMA;
            } 
            // fall through
          case 107: break;
          case 31: 
            { return PLUS;
            } 
            // fall through
          case 108: break;
          case 32: 
            { return MINUS;
            } 
            // fall through
          case 109: break;
          case 33: 
            { if (yylength()==2) {
        return STRING_EMPTY;
    }
    quote_balance = yytext().toString();
    yybegin(StringInside);
    return STRING_START;
            } 
            // fall through
          case 110: break;
          case 34: 
            { brace_block(ImportExport);
    return BRACE_L;
            } 
            // fall through
          case 111: break;
          case 35: 
            { brace_recover();
    return BRACE_R;
            } 
            // fall through
          case 112: break;
          case 36: 
            { return SYMBOL_RAW;
            } 
            // fall through
          case 113: break;
          case 37: 
            { yybegin(YYINITIAL);
    return SEMICOLON;
            } 
            // fall through
          case 114: break;
          case 38: 
            { let_balance += 1 ; return BRACE_L;
            } 
            // fall through
          case 115: break;
          case 39: 
            { let_balance -= 1 ; return BRACE_R;
            } 
            // fall through
          case 116: break;
          case 40: 
            { brace_block(YYINITIAL);
    return SEMICOLON;
            } 
            // fall through
          case 117: break;
          case 41: 
            { let_balance += 1 ; return PARENTHESIS_L;
            } 
            // fall through
          case 118: break;
          case 42: 
            { let_balance -= 1 ; return PARENTHESIS_R;
            } 
            // fall through
          case 119: break;
          case 43: 
            { let_balance += 1 ; return BRACKET_L;
            } 
            // fall through
          case 120: break;
          case 44: 
            { let_balance -= 1 ; return BRACKET_R;
            } 
            // fall through
          case 121: break;
          case 45: 
            { if (let_balance == 0) {
        yybegin(YYINITIAL);
        return BIND;
    }
    else {
        return BIND;
    }
            } 
            // fall through
          case 122: break;
          case 46: 
            { return EXISTS;
            } 
            // fall through
          case 123: break;
          case 47: 
            { brace_block(Class); return BRACE_L;
            } 
            // fall through
          case 124: break;
          case 48: 
            { brace_recover();    return BRACE_R;
            } 
            // fall through
          case 125: break;
          case 49: 
            { brace_block(Class); return PARENTHESIS_L;
            } 
            // fall through
          case 126: break;
          case 50: 
            { brace_recover();    return PARENTHESIS_R;
            } 
            // fall through
          case 127: break;
          case 51: 
            { return STRING_CHAR;
            } 
            // fall through
          case 128: break;
          case 52: 
            { if(quote_balance.equals(yytext().toString())) {
        yybegin(YYINITIAL);
        return STRING_END;
    }
    return STRING_CHAR;
            } 
            // fall through
          case 129: break;
          case 53: 
            { return COMMENT_LINE;
            } 
            // fall through
          case 130: break;
          case 54: 
            { return DOT2;
            } 
            // fall through
          case 131: break;
          case 55: 
            { return IF;
            } 
            // fall through
          case 132: break;
          case 56: 
            { return DEF;
            } 
            // fall through
          case 133: break;
          case 57: 
            { return EQ;
            } 
            // fall through
          case 134: break;
          case 58: 
            { return NE;
            } 
            // fall through
          case 135: break;
          case 59: 
            { if (let_balance == 0) {
        yybegin(YYINITIAL);
        return IN;
    }
    else {
        return SYMBOL_XID;
    }
            } 
            // fall through
          case 136: break;
          case 60: 
            { return COMMENT_DOCUMENT;
            } 
            // fall through
          case 137: break;
          case 61: 
            { return BYTE;
            } 
            // fall through
          case 138: break;
          case 62: 
            { return DECIMAL;
            } 
            // fall through
          case 139: break;
          case 63: 
            { return DOT3 ;
            } 
            // fall through
          case 140: break;
          case 64: 
            { return DOT_EQ;
            } 
            // fall through
          case 141: break;
          case 65: 
            { return DOT_LESS;
            } 
            // fall through
          case 142: break;
          case 66: 
            { yybegin(For);
    case_appearence = false;
    return FOR;
            } 
            // fall through
          case 143: break;
          case 67: 
            { yybegin(Let);
    case_appearence = false;
    return LET;
            } 
            // fall through
          case 144: break;
          case 68: 
            { return ELSE;
            } 
            // fall through
          case 145: break;
          case 69: 
            { yybegin(Class);
    return TAGGED;
            } 
            // fall through
          case 146: break;
          case 70: 
            { return TYPE;
            } 
            // fall through
          case 147: break;
          case 71: 
            { if (case_appearence == false) {
        case_appearence = true;
        return CASE;
    }
    else {
        return SYMBOL_XID;
    }
            } 
            // fall through
          case 148: break;
          case 72: 
            { return WHILE;
            } 
            // fall through
          case 149: break;
          case 73: 
            { return MATCH;
            } 
            // fall through
          case 150: break;
          case 74: 
            { yybegin(Class);
    return CLASS;
            } 
            // fall through
          case 151: break;
          case 75: 
            { yybegin(ImportExport);
    return IMPORT;
            } 
            // fall through
          case 152: break;
          case 76: 
            { yybegin(ImportExport);
    return EXPORT;
            } 
            // fall through
          case 153: break;
          case 77: 
            { yybegin(Class);
    return BITFLAG;
            } 
            // fall through
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
