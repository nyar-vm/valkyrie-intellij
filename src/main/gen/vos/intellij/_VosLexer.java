// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Valkyrie.flex

package vos.intellij;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static vos.intellij.language.psi.ValkyrieTypes.*;


public class _VosLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int StringSQ = 2;
  public static final int StringDQ = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\1\u1f00\7\u2000\1\u2100\1\u2000\1\u2200\1\u2300"+
    "\2\u2000\1\u2400\1\u2500\2\u2000\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u2000\1\u0100\1\u3000\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u2000\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u2000\1\u4f00"+
    "\1\u5000\1\u5100\1\u2000\3\u0100\1\u5200\1\u5300\1\u5400\12\u2000"+
    "\4\u0100\1\u5500\17\u2000\2\u0100\1\u5600\41\u2000\2\u0100\1\u5700"+
    "\1\u5800\2\u2000\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100\1\u5c00"+
    "\45\u2000\1\u0100\1\u5d00\1\u5e00\11\u2000\1\u5f00\24\u2000\1\u6000"+
    "\1\u6100\1\u2000\1\u6200\1\u6300\1\u6400\1\u6500\2\u2000\1\u6600"+
    "\5\u2000\1\u6700\1\u6800\1\u6900\5\u2000\1\u6a00\1\u6b00\4\u2000"+
    "\1\u6c00\21\u2000\246\u0100\1\u6d00\20\u0100\1\u6e00\1\u6f00\25\u0100"+
    "\1\u7000\34\u0100\1\u7100\14\u2000\2\u0100\1\u7200\u0b06\u2000\1\u7300"+
    "\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\0"+
    "\1\3\1\4\1\5\1\0\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\11\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\6\1\27\1\30"+
    "\1\31\2\30\1\32\1\31\10\33\1\34\5\33\1\35"+
    "\2\33\1\34\2\33\1\36\1\37\1\40\1\41\1\42"+
    "\1\0\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\33\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\33\1\62\1\63\1\64\1\65\1\66\1\33"+
    "\1\67\2\33\1\70\1\0\1\71\7\0\1\1\32\0"+
    "\1\1\11\0\1\72\12\0\1\72\1\0\1\73\2\0"+
    "\1\72\5\0\27\72\1\0\37\72\1\0\u01ca\72\4\0"+
    "\14\72\16\0\5\72\7\0\1\72\1\0\1\72\21\0"+
    "\160\73\5\72\1\0\2\72\3\0\3\72\1\0\1\72"+
    "\6\0\1\72\1\73\3\72\1\0\1\72\1\0\24\72"+
    "\1\0\123\72\1\0\213\72\1\0\5\73\2\0\246\72"+
    "\1\0\46\72\2\0\1\72\6\0\51\72\10\0\55\73"+
    "\1\0\1\73\1\0\2\73\1\0\2\73\1\0\1\73"+
    "\10\0\33\72\4\0\4\72\35\0\13\73\5\0\53\72"+
    "\37\73\4\0\2\72\1\73\143\72\1\0\1\72\7\73"+
    "\2\0\6\73\2\72\2\73\1\0\4\73\2\72\12\73"+
    "\3\72\2\0\1\72\20\0\1\72\1\73\36\72\33\73"+
    "\2\0\131\72\13\73\1\72\16\0\12\73\41\72\11\73"+
    "\2\72\4\0\1\72\2\0\1\73\2\0\26\72\4\73"+
    "\1\72\11\73\1\72\3\73\1\72\5\73\22\0\31\72"+
    "\3\73\4\0\13\72\65\0\25\72\1\0\10\72\25\0"+
    "\17\73\1\0\41\73\66\72\3\73\1\72\22\73\1\72"+
    "\7\73\12\72\2\73\2\0\12\73\1\0\20\72\3\73"+
    "\1\0\10\72\2\0\2\72\2\0\26\72\1\0\7\72"+
    "\1\0\1\72\3\0\4\72\2\0\1\73\1\72\7\73"+
    "\2\0\2\73\2\0\3\73\1\72\10\0\1\73\4\0"+
    "\2\72\1\0\3\72\2\73\2\0\12\73\2\72\12\0"+
    "\1\72\1\0\1\73\2\0\3\73\1\0\6\72\4\0"+
    "\2\72\2\0\26\72\1\0\7\72\1\0\2\72\1\0"+
    "\2\72\1\0\2\72\2\0\1\73\1\0\5\73\4\0"+
    "\2\73\2\0\3\73\3\0\1\73\7\0\4\72\1\0"+
    "\1\72\7\0\14\73\3\72\1\73\13\0\3\73\1\0"+
    "\11\72\1\0\3\72\1\0\26\72\1\0\7\72\1\0"+
    "\2\72\1\0\5\72\2\0\1\73\1\72\10\73\1\0"+
    "\3\73\1\0\3\73\2\0\1\72\17\0\2\72\2\73"+
    "\2\0\12\73\11\0\1\72\6\73\1\0\3\73\1\0"+
    "\10\72\2\0\2\72\2\0\26\72\1\0\7\72\1\0"+
    "\2\72\1\0\5\72\2\0\1\73\1\72\7\73\2\0"+
    "\2\73\2\0\3\73\10\0\2\73\4\0\2\72\1\0"+
    "\3\72\2\73\2\0\12\73\1\0\1\72\20\0\1\73"+
    "\1\72\1\0\6\72\3\0\3\72\1\0\4\72\3\0"+
    "\2\72\1\0\1\72\1\0\2\72\3\0\2\72\3\0"+
    "\3\72\3\0\14\72\4\0\5\73\3\0\3\73\1\0"+
    "\4\73\2\0\1\72\6\0\1\73\16\0\12\73\20\0"+
    "\5\73\10\72\1\0\3\72\1\0\27\72\1\0\20\72"+
    "\3\0\1\72\7\73\1\0\3\73\1\0\4\73\7\0"+
    "\2\73\1\0\3\72\5\0\2\72\2\73\2\0\12\73"+
    "\20\0\1\72\3\73\1\0\10\72\1\0\3\72\1\0"+
    "\27\72\1\0\12\72\1\0\5\72\2\0\1\73\1\72"+
    "\7\73\1\0\3\73\1\0\4\73\7\0\2\73\7\0"+
    "\1\72\1\0\2\72\2\73\2\0\12\73\1\0\2\72"+
    "\15\0\4\73\1\0\10\72\1\0\3\72\1\0\51\72"+
    "\2\73\1\72\7\73\1\0\3\73\1\0\4\73\1\72"+
    "\5\0\3\72\1\73\7\0\3\72\2\73\2\0\12\73"+
    "\12\0\6\72\2\0\2\73\1\0\22\72\3\0\30\72"+
    "\1\0\11\72\1\0\1\72\2\0\7\72\3\0\1\73"+
    "\4\0\6\73\1\0\1\73\1\0\10\73\6\0\12\73"+
    "\2\0\2\73\15\0\60\72\1\73\1\72\10\73\5\0"+
    "\7\72\10\73\1\0\12\73\47\0\2\72\1\0\1\72"+
    "\1\0\5\72\1\0\30\72\1\0\1\72\1\0\12\72"+
    "\1\73\1\72\12\73\1\72\2\0\5\72\1\0\1\72"+
    "\1\0\6\73\2\0\12\73\2\0\4\72\40\0\1\72"+
    "\27\0\2\73\6\0\12\73\13\0\1\73\1\0\1\73"+
    "\1\0\1\73\4\0\2\73\10\72\1\0\44\72\4\0"+
    "\24\73\1\0\2\73\5\72\13\73\1\0\44\73\11\0"+
    "\1\73\71\0\53\72\24\73\1\72\12\73\6\0\6\72"+
    "\4\73\4\72\3\73\1\72\3\73\2\72\7\73\3\72"+
    "\4\73\15\72\14\73\1\72\17\73\2\0\46\72\1\0"+
    "\1\72\5\0\1\72\2\0\53\72\1\0\115\72\1\0"+
    "\4\72\2\0\7\72\1\0\1\72\1\0\4\72\2\0"+
    "\51\72\1\0\4\72\2\0\41\72\1\0\4\72\2\0"+
    "\7\72\1\0\1\72\1\0\4\72\2\0\17\72\1\0"+
    "\71\72\1\0\4\72\2\0\103\72\2\0\3\73\11\0"+
    "\11\73\16\0\20\72\20\0\126\72\2\0\6\72\3\0"+
    "\u016c\72\2\0\21\72\1\1\32\72\5\0\113\72\3\0"+
    "\13\72\7\0\15\72\1\0\4\72\3\73\13\0\22\72"+
    "\3\73\13\0\22\72\2\73\14\0\15\72\1\0\3\72"+
    "\1\0\2\73\14\0\64\72\40\73\3\0\1\72\4\0"+
    "\1\72\1\73\2\0\12\73\41\0\3\73\2\0\12\73"+
    "\6\0\131\72\7\0\51\72\1\73\1\72\5\0\106\72"+
    "\12\0\37\72\1\0\14\73\4\0\14\73\12\0\12\73"+
    "\36\72\2\0\5\72\13\0\54\72\4\0\32\72\6\0"+
    "\13\73\45\0\27\72\5\73\4\0\65\72\12\73\1\0"+
    "\35\73\2\0\13\73\6\0\12\73\15\0\1\72\10\0"+
    "\16\73\102\0\5\73\57\72\21\73\7\72\4\0\12\73"+
    "\21\0\11\73\14\0\3\73\36\72\15\73\2\72\12\73"+
    "\54\72\16\73\14\0\44\72\24\73\10\0\12\73\3\0"+
    "\3\72\12\73\44\72\2\0\11\72\7\0\53\72\2\0"+
    "\3\72\20\0\3\73\1\0\25\73\4\72\1\73\6\72"+
    "\1\73\2\72\3\73\1\72\5\0\300\72\72\73\1\0"+
    "\5\73\26\72\2\0\6\72\2\0\46\72\2\0\6\72"+
    "\2\0\10\72\1\0\1\72\1\0\1\72\1\0\1\72"+
    "\1\0\37\72\2\0\65\72\1\0\7\72\1\0\1\72"+
    "\3\0\3\72\1\0\7\72\3\0\4\72\2\0\6\72"+
    "\4\0\15\72\5\0\3\72\1\0\7\72\3\0\13\1"+
    "\35\0\2\1\5\0\1\1\17\0\2\73\23\0\1\73"+
    "\12\0\1\1\21\0\1\72\15\0\1\72\20\0\15\72"+
    "\63\0\15\73\4\0\1\73\3\0\14\73\21\0\1\72"+
    "\4\0\1\72\2\0\12\72\1\0\1\72\2\0\6\72"+
    "\6\0\1\72\1\0\1\72\1\0\1\72\1\0\20\72"+
    "\2\0\4\72\5\0\5\72\4\0\1\72\21\0\51\72"+
    "\333\0\1\74\1\75\u0217\0\1\74\1\75\201\0\57\72"+
    "\1\0\57\72\1\0\205\72\6\0\4\72\3\73\2\72"+
    "\14\0\46\72\1\0\1\72\5\0\1\72\2\0\70\72"+
    "\7\0\1\72\17\0\1\73\27\72\11\0\7\72\1\0"+
    "\7\72\1\0\7\72\1\0\7\72\1\0\7\72\1\0"+
    "\7\72\1\0\7\72\1\0\7\72\1\0\40\73\1\1"+
    "\4\0\3\72\31\0\11\72\6\73\1\0\5\72\2\0"+
    "\5\72\4\0\126\72\2\0\2\73\2\0\3\72\1\0"+
    "\132\72\1\0\4\72\5\0\53\72\1\0\136\72\21\0"+
    "\33\72\65\0\306\72\112\0\360\72\20\0\215\72\103\0"+
    "\56\72\2\0\15\72\3\0\20\72\12\73\2\72\24\0"+
    "\57\72\1\73\4\0\12\73\1\0\37\72\2\73\120\72"+
    "\2\73\45\0\11\72\2\0\147\72\2\0\65\72\2\0"+
    "\5\72\60\0\13\72\1\73\3\72\1\73\4\72\1\73"+
    "\27\72\5\73\30\0\64\72\14\0\2\73\62\72\22\73"+
    "\12\0\12\73\6\0\22\73\6\72\3\0\1\72\1\0"+
    "\2\72\13\73\34\72\10\73\2\0\27\72\15\73\14\0"+
    "\35\72\3\0\4\73\57\72\16\73\16\0\1\72\12\73"+
    "\6\0\5\72\1\73\12\72\12\73\5\72\1\0\51\72"+
    "\16\73\11\0\3\72\1\73\10\72\2\73\2\0\12\73"+
    "\6\0\27\72\3\0\1\72\3\73\62\72\1\73\1\72"+
    "\3\73\2\72\2\73\5\72\2\73\1\72\1\73\1\72"+
    "\30\0\3\72\2\0\13\72\5\73\2\0\3\72\2\73"+
    "\12\0\6\72\2\0\6\72\2\0\6\72\11\0\7\72"+
    "\1\0\7\72\1\0\53\72\1\0\14\72\10\0\163\72"+
    "\10\73\1\0\2\73\2\0\12\73\6\0\244\72\14\0"+
    "\27\72\4\0\61\72\4\0\156\72\2\0\152\72\46\0"+
    "\7\72\14\0\5\72\5\0\1\72\1\73\12\72\1\0"+
    "\15\72\1\0\5\72\1\0\1\72\1\0\2\72\1\0"+
    "\2\72\1\0\154\72\41\0\213\72\6\0\332\72\22\0"+
    "\100\72\2\0\66\72\50\0\12\72\6\0\20\73\20\0"+
    "\20\73\3\0\2\73\30\0\3\73\41\0\1\72\1\0"+
    "\1\72\3\0\1\72\1\0\1\72\1\0\1\72\1\0"+
    "\1\72\1\0\176\72\23\0\12\73\7\0\32\72\4\0"+
    "\1\73\1\0\32\72\13\0\70\72\2\73\37\72\3\0"+
    "\6\72\2\0\6\72\2\0\6\72\2\0\3\72\43\0"+
    "\14\72\1\0\32\72\1\0\23\72\1\0\2\72\1\0"+
    "\17\72\2\0\16\72\42\0\173\72\105\0\65\72\210\0"+
    "\1\73\202\0\35\72\3\0\61\72\17\0\1\73\37\0"+
    "\40\72\15\0\36\72\5\0\46\72\5\73\5\0\36\72"+
    "\2\0\44\72\4\0\10\72\1\0\5\72\52\0\236\72"+
    "\2\0\12\73\6\0\44\72\4\0\44\72\4\0\50\72"+
    "\10\0\64\72\234\0\67\72\11\0\26\72\12\0\10\72"+
    "\230\0\6\72\2\0\1\72\1\0\54\72\1\0\2\72"+
    "\3\0\1\72\2\0\27\72\12\0\27\72\11\0\37\72"+
    "\101\0\23\72\1\0\2\72\12\0\26\72\12\0\32\72"+
    "\106\0\70\72\6\0\2\72\100\0\1\72\3\73\1\0"+
    "\2\73\5\0\4\73\4\72\1\0\3\72\1\0\35\72"+
    "\2\0\3\73\4\0\1\73\40\0\35\72\3\0\35\72"+
    "\43\0\10\72\1\0\34\72\2\73\31\0\66\72\12\0"+
    "\26\72\12\0\23\72\15\0\22\72\156\0\111\72\67\0"+
    "\63\72\15\0\63\72\15\0\44\72\4\73\10\0\12\73"+
    "\306\0\35\72\12\0\1\72\10\0\26\72\13\73\217\0"+
    "\27\72\11\0\3\73\65\72\17\73\37\0\12\73\17\0"+
    "\4\73\55\72\13\73\25\0\31\72\7\0\12\73\6\0"+
    "\3\73\44\72\16\73\1\0\12\73\4\0\1\72\2\73"+
    "\11\0\43\72\1\73\2\0\1\72\11\0\3\73\60\72"+
    "\16\73\4\72\4\0\4\73\3\0\12\73\1\72\1\0"+
    "\1\72\43\0\22\72\1\0\31\72\14\73\6\0\1\73"+
    "\101\0\7\72\1\0\1\72\1\0\4\72\1\0\17\72"+
    "\1\0\12\72\7\0\57\72\14\73\5\0\12\73\6\0"+
    "\4\73\1\0\10\72\2\0\2\72\2\0\26\72\1\0"+
    "\7\72\1\0\2\72\1\0\5\72\1\0\2\73\1\72"+
    "\7\73\2\0\2\73\2\0\3\73\2\0\1\72\6\0"+
    "\1\73\5\0\5\72\2\73\2\0\7\73\3\0\5\73"+
    "\213\0\65\72\22\73\4\72\5\0\12\73\4\0\1\73"+
    "\1\72\40\0\60\72\24\73\2\72\1\0\1\72\10\0"+
    "\12\73\246\0\57\72\7\73\2\0\11\73\27\0\4\72"+
    "\2\73\42\0\60\72\21\73\3\0\1\72\13\0\12\73"+
    "\46\0\53\72\15\73\1\72\7\0\12\73\66\0\33\72"+
    "\2\0\17\73\4\0\12\73\306\0\54\72\17\73\145\0"+
    "\100\72\12\73\25\0\1\72\240\0\10\72\2\0\47\72"+
    "\7\73\2\0\7\73\1\72\1\0\1\72\1\73\33\0"+
    "\1\72\12\73\50\72\7\73\1\72\4\73\10\0\1\73"+
    "\10\0\1\72\13\73\56\72\20\73\3\0\1\72\42\0"+
    "\71\72\7\0\11\72\1\0\45\72\10\73\1\0\10\73"+
    "\1\72\17\0\12\73\30\0\36\72\2\0\26\73\1\0"+
    "\16\73\111\0\7\72\1\0\2\72\1\0\46\72\6\73"+
    "\3\0\1\73\1\0\2\73\1\0\7\73\1\72\1\73"+
    "\10\0\12\73\6\0\6\72\1\0\2\72\1\0\40\72"+
    "\5\73\1\0\2\73\1\0\5\73\1\72\7\0\12\73"+
    "\u0136\0\23\72\4\73\11\0\232\72\146\0\157\72\21\0"+
    "\304\72\274\0\57\72\321\0\107\72\271\0\71\72\7\0"+
    "\37\72\1\0\12\73\146\0\36\72\2\0\5\73\13\0"+
    "\60\72\7\73\11\0\4\72\14\0\12\73\11\0\25\72"+
    "\5\0\23\72\260\0\100\72\200\0\113\72\4\0\1\73"+
    "\1\72\67\73\7\0\4\73\15\72\100\0\2\72\1\0"+
    "\1\72\34\0\370\72\10\0\363\72\15\0\37\72\61\0"+
    "\3\72\21\0\4\72\10\0\u018c\72\4\0\153\72\5\0"+
    "\15\72\3\0\11\72\7\0\12\72\3\0\2\73\306\0"+
    "\5\73\3\0\6\73\10\0\10\73\2\0\7\73\36\0"+
    "\4\73\224\0\3\73\273\0\125\72\1\0\107\72\1\0"+
    "\2\72\2\0\1\72\2\0\2\72\2\0\4\72\1\0"+
    "\14\72\1\0\1\72\1\0\7\72\1\0\101\72\1\0"+
    "\4\72\2\0\10\72\1\0\7\72\1\0\34\72\1\0"+
    "\4\72\1\0\5\72\1\0\1\72\3\0\7\72\1\0"+
    "\u0154\72\2\0\31\72\1\0\31\72\1\0\37\72\1\0"+
    "\31\72\1\0\37\72\1\0\31\72\1\0\37\72\1\0"+
    "\31\72\1\0\37\72\1\0\31\72\1\0\10\72\2\0"+
    "\151\73\4\0\62\73\10\0\1\73\16\0\1\73\26\0"+
    "\5\73\1\0\17\73\120\0\7\73\1\0\21\73\2\0"+
    "\7\73\1\0\2\73\1\0\5\73\325\0\55\72\3\0"+
    "\7\73\7\72\2\0\12\73\4\0\1\72\u0171\0\54\72"+
    "\16\73\6\0\305\72\13\0\7\73\51\0\104\72\7\73"+
    "\1\72\4\0\12\73\246\0\4\72\1\0\33\72\1\0"+
    "\2\72\1\0\1\72\2\0\1\72\1\0\12\72\1\0"+
    "\4\72\1\0\1\72\1\0\1\72\6\0\1\72\4\0"+
    "\1\72\1\0\1\72\1\0\1\72\1\0\3\72\1\0"+
    "\2\72\1\0\1\72\2\0\1\72\1\0\1\72\1\0"+
    "\1\72\1\0\1\72\1\0\1\72\1\0\2\72\1\0"+
    "\1\72\2\0\4\72\1\0\7\72\1\0\4\72\1\0"+
    "\4\72\1\0\1\72\1\0\12\72\1\0\21\72\5\0"+
    "\3\72\1\0\5\72\1\0\21\72\104\0\327\72\51\0"+
    "\65\72\13\0\336\72\2\0\u0182\72\16\0\u0131\72\37\0"+
    "\36\72\342\0\360\73\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\1\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\5\1\23\1\1\1\24"+
    "\1\25\14\5\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\2\0\1\35\1\36\4\0\1\15\1\37\3\0"+
    "\4\5\1\40\12\5\1\41\1\42\1\0\1\35\1\43"+
    "\3\0\1\44\3\0\2\5\1\40\1\5\1\40\1\45"+
    "\10\5\1\46\1\0\1\36\1\0\1\44\1\0\1\47"+
    "\2\5\1\50\11\5\1\51\1\52\10\5\1\50\5\5"+
    "\1\52\3\5\1\53\3\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\272\0\272\0\u0136"+
    "\0\272\0\272\0\272\0\272\0\272\0\272\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\272\0\272\0\u026c\0\272\0\u02aa\0\u02e8"+
    "\0\272\0\u0326\0\272\0\272\0\u0364\0\u03a2\0\u03e0\0\u041e"+
    "\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e"+
    "\0\272\0\272\0\272\0\272\0\272\0\272\0\272\0\u064c"+
    "\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c"+
    "\0\272\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee"+
    "\0\u02e8\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0"+
    "\0\u0bde\0\u0c1c\0\u0c5a\0\272\0\272\0\u0c98\0\u0cd6\0\u0d14"+
    "\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04"+
    "\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u02e8\0\u103a\0\u1078\0\u10b6"+
    "\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\272\0\u122a\0\u122a"+
    "\0\u1268\0\u12a6\0\u12e4\0\272\0\u1322\0\u1360\0\u139e\0\u13dc"+
    "\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc"+
    "\0\u1268\0\u02e8\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740"+
    "\0\u177e\0\u17bc\0\u02e8\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2"+
    "\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u02e8\0\u1a28\0\u1a66\0\u1aa4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\4\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\15\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\7\6\30"+
    "\1\31\1\32\1\33\1\34\1\10\2\30\1\35\1\36"+
    "\1\37\1\40\4\30\1\41\1\30\1\42\1\43\1\44"+
    "\1\30\1\45\1\46\1\47\1\50\1\30\1\51\1\52"+
    "\1\10\1\4\1\53\1\54\7\55\1\56\27\55\1\32"+
    "\41\55\1\57\33\55\1\32\36\55\77\0\2\5\100\0"+
    "\1\10\12\0\2\10\6\0\6\10\4\0\26\10\2\0"+
    "\2\10\20\0\1\60\71\0\1\61\4\0\1\62\74\0"+
    "\1\63\1\0\2\64\1\65\5\0\1\66\1\67\2\66"+
    "\1\67\1\66\5\0\1\66\1\67\3\66\1\67\7\66"+
    "\1\67\6\66\1\67\24\0\1\63\1\0\2\22\1\65"+
    "\5\0\6\66\4\0\1\70\25\66\33\0\1\53\75\0"+
    "\1\54\55\0\1\10\12\0\2\30\1\65\5\0\6\30"+
    "\4\0\1\10\25\30\2\0\2\10\2\0\35\71\1\72"+
    "\27\71\1\73\1\71\1\74\6\71\5\0\1\10\12\0"+
    "\2\30\1\65\5\0\6\30\4\0\1\10\12\30\1\75"+
    "\2\30\1\76\7\30\2\0\2\10\7\0\1\10\12\0"+
    "\2\30\1\65\5\0\6\30\4\0\1\10\4\30\1\77"+
    "\20\30\2\0\2\10\7\0\1\10\12\0\2\30\1\65"+
    "\5\0\6\30\4\0\1\10\14\30\1\100\10\30\2\0"+
    "\2\10\7\0\1\10\12\0\2\30\1\65\5\0\6\30"+
    "\4\0\1\10\14\30\1\101\5\30\1\102\2\30\2\0"+
    "\2\10\7\0\1\10\12\0\2\30\1\65\5\0\6\30"+
    "\4\0\1\10\4\30\1\103\20\30\2\0\2\10\7\0"+
    "\1\10\12\0\2\30\1\65\5\0\6\30\4\0\1\10"+
    "\1\104\24\30\2\0\2\10\7\0\1\10\12\0\2\30"+
    "\1\65\5\0\6\30\4\0\1\10\1\30\1\105\23\30"+
    "\2\0\2\10\7\0\1\10\12\0\2\30\1\65\5\0"+
    "\6\30\4\0\1\10\1\106\16\30\1\107\5\30\2\0"+
    "\2\10\7\0\1\10\12\0\2\30\1\65\5\0\6\30"+
    "\4\0\1\10\21\30\1\110\3\30\2\0\2\10\7\0"+
    "\1\10\12\0\2\30\1\65\5\0\6\30\4\0\1\10"+
    "\1\111\24\30\2\0\2\10\7\0\1\10\12\0\2\30"+
    "\1\65\5\0\6\30\4\0\1\10\14\30\1\112\10\30"+
    "\2\0\2\10\7\0\1\10\12\0\2\30\1\65\5\0"+
    "\6\30\4\0\1\10\1\113\24\30\2\0\2\10\26\0"+
    "\1\114\1\115\50\0\12\61\1\116\63\61\2\117\1\0"+
    "\14\117\1\120\56\117\12\0\1\121\5\0\2\63\10\0"+
    "\1\122\14\0\1\122\44\0\1\63\1\0\2\64\1\65"+
    "\5\0\6\66\5\0\25\66\25\0\1\123\76\0\2\66"+
    "\1\65\5\0\6\66\5\0\25\66\26\0\2\124\1\65"+
    "\5\0\3\124\3\66\5\0\6\124\17\66\26\0\2\70"+
    "\20\0\1\70\123\0\1\125\25\0\2\126\6\0\3\126"+
    "\10\0\6\126\45\0\2\127\6\0\3\127\10\0\6\127"+
    "\32\0\1\10\12\0\2\30\1\65\5\0\6\30\4\0"+
    "\1\10\1\130\24\30\2\0\2\10\7\0\1\10\12\0"+
    "\2\30\1\65\5\0\6\30\4\0\1\10\14\30\1\131"+
    "\10\30\2\0\2\10\7\0\1\10\12\0\2\30\1\65"+
    "\5\0\6\30\4\0\1\10\5\30\1\132\17\30\2\0"+
    "\2\10\7\0\1\10\12\0\2\30\1\65\5\0\6\30"+
    "\4\0\1\10\22\30\1\133\2\30\2\0\2\10\7\0"+
    "\1\10\12\0\2\30\1\65\5\0\6\30\4\0\1\10"+
    "\14\30\1\134\10\30\2\0\2\10\7\0\1\10\12\0"+
    "\2\30\1\65\5\0\6\30\4\0\1\10\21\30\1\135"+
    "\3\30\2\0\2\10\7\0\1\10\12\0\2\30\1\65"+
    "\5\0\6\30\4\0\1\10\13\30\1\136\11\30\2\0"+
    "\2\10\7\0\1\10\12\0\2\30\1\65\5\0\6\30"+
    "\4\0\1\10\10\30\1\137\14\30\2\0\2\10\7\0"+
    "\1\10\12\0\2\30\1\65\5\0\6\30\4\0\1\10"+
    "\2\30\1\140\22\30\2\0\2\10\7\0\1\10\12\0"+
    "\2\30\1\65\5\0\6\30\4\0\1\10\7\30\1\141"+
    "\15\30\2\0\2\10\7\0\1\10\12\0\2\30\1\65"+
    "\5\0\6\30\4\0\1\10\17\30\1\142\5\30\2\0"+
    "\2\10\7\0\1\10\12\0\2\30\1\65\5\0\6\30"+
    "\4\0\1\10\1\30\1\143\4\30\1\144\16\30\2\0"+
    "\2\10\7\0\1\10\12\0\2\30\1\65\5\0\6\30"+
    "\4\0\1\10\7\30\1\145\15\30\2\0\2\10\7\0"+
    "\1\10\12\0\2\30\1\65\5\0\6\30\4\0\1\10"+
    "\17\30\1\135\5\30\2\0\2\10\2\0\12\61\1\116"+
    "\4\61\1\146\56\61\2\117\1\0\73\117\2\120\1\0"+
    "\73\120\12\0\1\122\76\0\1\147\1\0\1\147\2\0"+
    "\2\150\73\0\1\151\76\0\2\124\1\65\5\0\3\124"+
    "\3\66\4\0\1\152\6\124\17\66\26\0\2\153\6\0"+
    "\3\153\10\0\6\153\45\0\2\74\6\0\3\74\10\0"+
    "\6\74\45\0\2\154\6\0\3\154\10\0\6\154\32\0"+
    "\1\10\12\0\2\30\1\65\5\0\6\30\4\0\1\10"+
    "\20\30\1\155\4\30\2\0\2\10\7\0\1\10\12\0"+
    "\2\30\1\65\5\0\6\30\4\0\1\10\20\30\1\103"+
    "\4\30\2\0\2\10\7\0\1\10\12\0\2\30\1\65"+
    "\5\0\6\30\4\0\1\10\7\30\1\156\15\30\2\0"+
    "\2\10\7\0\1\10\12\0\2\30\1\65\5\0\6\30"+
    "\4\0\1\10\13\30\1\157\11\30\2\0\2\10\7\0"+
    "\1\10\12\0\2\30\1\65\5\0\6\30\4\0\1\10"+
    "\2\30\1\160\22\30\2\0\2\10\7\0\1\10\12\0"+
    "\2\30\1\65\5\0\6\30\4\0\1\10\4\30\1\161"+
    "\20\30\2\0\2\10\7\0\1\10\12\0\2\30\1\65"+
    "\5\0\6\30\4\0\1\10\4\30\1\162\20\30\2\0"+
    "\2\10\7\0\1\10\12\0\2\30\1\65\5\0\6\30"+
    "\4\0\1\10\11\30\1\163\13\30\2\0\2\10\7\0"+
    "\1\10\12\0\2\30\1\65\5\0\6\30\4\0\1\10"+
    "\13\30\1\164\11\30\2\0\2\10\7\0\1\10\12\0"+
    "\2\30\1\65\5\0\6\30\4\0\1\10\22\30\1\165"+
    "\2\30\2\0\2\10\7\0\1\10\12\0\2\30\1\65"+
    "\5\0\6\30\4\0\1\10\12\30\1\166\12\30\2\0"+
    "\2\10\7\0\1\10\12\0\2\30\1\65\5\0\6\30"+
    "\4\0\1\10\6\30\1\167\16\30\2\0\2\10\7\0"+
    "\1\10\12\0\2\30\1\65\5\0\6\30\4\0\1\10"+
    "\15\30\1\170\7\30\2\0\2\10\22\0\2\150\60\0"+
    "\1\171\1\0\1\171\6\0\5\171\6\0\6\171\4\0"+
    "\26\171\2\0\2\171\22\0\2\152\6\0\3\152\7\0"+
    "\7\152\45\0\2\153\6\0\3\153\10\0\6\153\20\0"+
    "\1\154\11\0\1\10\12\0\2\30\1\65\5\0\6\30"+
    "\4\0\1\10\20\30\1\172\4\30\2\0\2\10\7\0"+
    "\1\10\12\0\2\30\1\65\5\0\6\30\4\0\1\10"+
    "\14\30\1\173\10\30\2\0\2\10\7\0\1\10\12\0"+
    "\2\30\1\65\5\0\6\30\4\0\1\10\4\30\1\174"+
    "\20\30\2\0\2\10\7\0\1\10\12\0\2\30\1\65"+
    "\5\0\6\30\4\0\1\10\21\30\1\175\3\30\2\0"+
    "\2\10\7\0\1\10\12\0\2\30\1\65\5\0\6\30"+
    "\4\0\1\10\20\30\1\176\4\30\2\0\2\10\7\0"+
    "\1\10\12\0\2\30\1\65\5\0\6\30\4\0\1\10"+
    "\2\30\1\103\22\30\2\0\2\10\7\0\1\10\12\0"+
    "\2\30\1\65\5\0\6\30\4\0\1\10\1\177\24\30"+
    "\2\0\2\10\7\0\1\10\12\0\2\30\1\65\5\0"+
    "\6\30\4\0\1\10\7\30\1\200\15\30\2\0\2\10"+
    "\7\0\1\10\12\0\2\30\1\65\5\0\6\30\4\0"+
    "\1\10\2\30\1\201\22\30\2\0\2\10\7\0\1\10"+
    "\12\0\2\30\1\65\5\0\6\30\4\0\1\10\4\30"+
    "\1\172\20\30\2\0\2\10\7\0\1\10\12\0\2\30"+
    "\1\65\5\0\6\30\4\0\1\10\4\30\1\202\20\30"+
    "\2\0\2\10\7\0\1\10\12\0\2\30\1\65\5\0"+
    "\6\30\4\0\1\10\14\30\1\203\10\30\2\0\2\10"+
    "\7\0\1\10\12\0\2\30\1\65\5\0\6\30\4\0"+
    "\1\10\4\30\1\101\20\30\2\0\2\10\7\0\1\10"+
    "\12\0\2\30\1\65\5\0\6\30\4\0\1\10\17\30"+
    "\1\204\5\30\2\0\2\10\7\0\1\10\12\0\2\30"+
    "\1\65\5\0\6\30\4\0\1\10\7\30\1\205\15\30"+
    "\2\0\2\10\7\0\1\10\12\0\2\30\1\65\5\0"+
    "\6\30\4\0\1\10\16\30\1\206\6\30\2\0\2\10"+
    "\7\0\1\10\12\0\2\30\1\65\5\0\6\30\4\0"+
    "\1\10\6\30\1\207\16\30\2\0\2\10\7\0\1\10"+
    "\12\0\2\30\1\65\5\0\6\30\4\0\1\10\21\30"+
    "\1\210\3\30\2\0\2\10\7\0\1\10\12\0\2\30"+
    "\1\65\5\0\6\30\4\0\1\10\21\30\1\211\3\30"+
    "\2\0\2\10\7\0\1\10\12\0\2\30\1\65\5\0"+
    "\6\30\4\0\1\10\3\30\1\203\21\30\2\0\2\10"+
    "\7\0\1\10\12\0\2\30\1\65\5\0\6\30\4\0"+
    "\1\10\1\212\24\30\2\0\2\10\7\0\1\10\12\0"+
    "\2\30\1\65\5\0\6\30\4\0\1\10\15\30\1\213"+
    "\7\30\2\0\2\10\7\0\1\10\12\0\2\30\1\65"+
    "\5\0\6\30\4\0\1\10\1\214\24\30\2\0\2\10"+
    "\7\0\1\10\12\0\2\30\1\65\5\0\6\30\4\0"+
    "\1\10\4\30\1\215\20\30\2\0\2\10\7\0\1\10"+
    "\12\0\2\30\1\65\5\0\6\30\4\0\1\10\7\30"+
    "\1\216\15\30\2\0\2\10\7\0\1\10\12\0\2\30"+
    "\1\65\5\0\6\30\4\0\1\10\22\30\1\217\2\30"+
    "\2\0\2\10\7\0\1\10\12\0\2\30\1\65\5\0"+
    "\6\30\4\0\1\10\21\30\1\220\3\30\2\0\2\10"+
    "\7\0\1\10\12\0\2\30\1\65\5\0\6\30\4\0"+
    "\1\10\14\30\1\101\10\30\2\0\2\10\7\0\1\10"+
    "\12\0\2\30\1\65\5\0\6\30\4\0\1\10\2\30"+
    "\1\207\22\30\2\0\2\10\7\0\1\10\12\0\2\30"+
    "\1\65\5\0\6\30\4\0\1\10\23\30\1\166\1\30"+
    "\2\0\2\10\7\0\1\10\12\0\2\30\1\65\5\0"+
    "\6\30\4\0\1\10\17\30\1\166\5\30\2\0\2\10"+
    "\7\0\1\10\12\0\2\30\1\65\5\0\6\30\4\0"+
    "\1\10\4\30\1\203\20\30\2\0\2\10\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6882];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\2\11\1\1\6\11\4\1\2\11"+
    "\1\1\1\11\2\1\1\11\1\1\2\11\14\1\7\11"+
    "\2\0\2\1\4\0\1\1\1\11\3\0\17\1\2\11"+
    "\1\0\2\1\3\0\1\1\3\0\16\1\1\11\1\0"+
    "\1\1\1\0\1\1\1\0\1\11\44\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _ValkyrieLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _VosLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 44: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 45: break;
          case 3:
            { yybegin(StringDQ); return STRING_DQ;
            }
          // fall through
          case 46: break;
          case 4:
            { return ANNOTATION_MARK;
            }
          // fall through
          case 47: break;
          case 5:
            { return SYMBOL;
            }
          // fall through
          case 48: break;
          case 6:
            { yybegin(StringSQ); return STRING_SQ;
            }
          // fall through
          case 49: break;
          case 7:
            { return PARENTHESIS_L;
            }
          // fall through
          case 50: break;
          case 8:
            { return PARENTHESIS_R;
            }
          // fall through
          case 51: break;
          case 9:
            { return STAR;
            }
          // fall through
          case 52: break;
          case 10:
            { return SIGN;
            }
          // fall through
          case 53: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 54: break;
          case 12:
            { return DOT;
            }
          // fall through
          case 55: break;
          case 13:
            { return INTEGER;
            }
          // fall through
          case 56: break;
          case 14:
            { return COLON;
            }
          // fall through
          case 57: break;
          case 15:
            { return SEMICOLON;
            }
          // fall through
          case 58: break;
          case 16:
            { return ANGLE_L;
            }
          // fall through
          case 59: break;
          case 17:
            { return EQ;
            }
          // fall through
          case 60: break;
          case 18:
            { return ANGLE_R;
            }
          // fall through
          case 61: break;
          case 19:
            { return BRACKET_L;
            }
          // fall through
          case 62: break;
          case 20:
            { return BRACKET_R;
            }
          // fall through
          case 63: break;
          case 21:
            { return ACCENT;
            }
          // fall through
          case 64: break;
          case 22:
            { return BRACE_L;
            }
          // fall through
          case 65: break;
          case 23:
            { return BRACE_R;
            }
          // fall through
          case 66: break;
          case 24:
            { return LEQ;
            }
          // fall through
          case 67: break;
          case 25:
            { return GEQ;
            }
          // fall through
          case 68: break;
          case 26:
            { return CHARACTER;
            }
          // fall through
          case 69: break;
          case 27:
            { yybegin(YYINITIAL);return STRING_SQ;
            }
          // fall through
          case 70: break;
          case 28:
            { yybegin(YYINITIAL);return STRING_DQ;
            }
          // fall through
          case 71: break;
          case 29:
            { return COMMENT;
            }
          // fall through
          case 72: break;
          case 30:
            { return DECIMAL;
            }
          // fall through
          case 73: break;
          case 31:
            { return ESCAPE_SPECIAL;
            }
          // fall through
          case 74: break;
          case 32:
            { return KW_DEFINE;
            }
          // fall through
          case 75: break;
          case 33:
            { return RANGE_LE;
            }
          // fall through
          case 76: break;
          case 34:
            { return RANGE_EQ;
            }
          // fall through
          case 77: break;
          case 35:
            { return COMMENT_DOCUMENT;
            }
          // fall through
          case 78: break;
          case 36:
            { return BYTE;
            }
          // fall through
          case 79: break;
          case 37:
            { return KW_LET;
            }
          // fall through
          case 80: break;
          case 38:
            { return COMMENT_BLOCK;
            }
          // fall through
          case 81: break;
          case 39:
            { return ESCAPE_UNICODE;
            }
          // fall through
          case 82: break;
          case 40:
            { return KW_UNION;
            }
          // fall through
          case 83: break;
          case 41:
            { return URL;
            }
          // fall through
          case 84: break;
          case 42:
            { return KW_CLASS;
            }
          // fall through
          case 85: break;
          case 43:
            { return KW_NAMESPACE;
            }
          // fall through
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
