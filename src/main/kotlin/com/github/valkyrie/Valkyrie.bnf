{
    parserClass = "com.github.valkyrie.language.parser.FluentParser"
    parserUtilClass = "com.github.valkyrie.language.psi.FluentParserExtension"

    extends = "com.github.valkyrie.language.psi.FluentElement"

    psiClassPrefix = "Fluent"
    psiImplClassSuffix = "Node"
    psiPackage = "com.github.valkyrie.language.psi"
    psiImplPackage = "com.github.valkyrie.language.psi_node"

    elementTypeHolderClass = "com.github.valkyrie.language.psi.FluentTypes"
    elementTypeClass = "com.github.valkyrie.language.psi.FluentElementType"
    tokenTypeClass = "com.github.valkyrie.language.psi.FluentTokenType"

    psiImplUtilClass = "com.github.valkyrie.language.psi_node.FluentPsiExtension"

    tokens = [
        // comment
        COMMENT_DOCUMENT = "Comment Document"
        COMMENT = "Comment"
        COMMENT_BLOCK = "Comment Block"

        // literal
        URL = "Url"
        SYMBOL = "Symbol"
        STRING_QUOTE = "String Quote"
        STRING_CHAR = "String Character"
        STRING_ESCAPE = "String Escaped"
        STRING_LITERAL = "String Literal"
        SELECTION_LINE = "SELECTION_LINE"
        COMMENT_LINE = "Comment Line"

        PARENTHESIS_L = '('
        PARENTHESIS_R = ')'
        BRACKET_L = '['
        BRACKET_R = ']'
        BRACE_L = '{'
        BRACE_R = '}'
        ANGLE_L = '<'
        ANGLE_R = '>'
        ACCENT = '^'
        EQ = '='
        COLON = ':'
        SEMICOLON = ';'
        COMMA = ','
        DOLLAR = '$'
        DOT = '.'
        STAR = '*'
        AT = '@'
        TO = "->"
        HYPHEN = "-"
        IF = "if"
        ELSE = "else"
        FOR = "for"
        IN = "in"
        WHILE = "while"
        MATCH = 'match'
        CATCH = 'catch'
        LET = "let"
        DEF = "def"
        CLASS = 'class'
        TRAIT = 'trait'
    ]
}

valkyrie ::= statements*
private statements ::=
    if_statement
  | for_statement
  | while_statement
  | match_statement
  | let_statement
  | def_statement
  | class_statement
  | trait_statement
  ;
// ---------------------------------------------------------------------------------------------------------------------
if_statement ::= (IF condition block) [(ELSE IF condition block)* (ELSE block)]
block ::= expression;
condition ::= expression;
// ---------------------------------------------------------------------------------------------------------------------
for_statement ::= FOR pattern IN expression block;

pattern ::= namespace;
// ---------------------------------------------------------------------------------------------------------------------
while_statement ::= WHILE expression block;
// ---------------------------------------------------------------------------------------------------------------------
match_statement ::= MATCH expression block;
// ---------------------------------------------------------------------------------------------------------------------
let_statement ::= LET pattern "=" block;
// ---------------------------------------------------------------------------------------------------------------------
def_statement ::= DEF expression block;
// ---------------------------------------------------------------------------------------------------------------------
class_statement ::= CLASS expression block;
// ---------------------------------------------------------------------------------------------------------------------
trait_statement ::= TRAIT expression block;
// ---------------------------------------------------------------------------------------------------------------------
private expression ::= namespace;
// ---------------------------------------------------------------------------------------------------------------------
namespace           ::= SYMBOL;
atoms ::= INTEGER | DECIMAL;