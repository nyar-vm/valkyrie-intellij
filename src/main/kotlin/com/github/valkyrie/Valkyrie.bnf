{
    parserClass = "com.github.valkyrie.language.parser.FluentParser"
    parserUtilClass = "com.github.valkyrie.language.psi.FluentParserExtension"

    extends = "com.github.valkyrie.language.psi.FluentElement"

    psiClassPrefix = "Fluent"
    psiImplClassSuffix = "Node"
    psiPackage = "com.github.valkyrie.language.psi"
    psiImplPackage = "com.github.valkyrie.language.psi_node"

    elementTypeHolderClass = "com.github.valkyrie.language.psi.FluentTypes"
    elementTypeClass = "com.github.valkyrie.language.psi.FluentElementType"
    tokenTypeClass = "com.github.valkyrie.language.psi.FluentTokenType"

    psiImplUtilClass = "com.github.valkyrie.language.psi_node.FluentPsiExtension"

    tokens = [
        // comment
        COMMENT_DOCUMENT = "Comment Document"
        COMMENT = "Comment"
        COMMENT_BLOCK = "Comment Block"

        // literal
        URL = "Url"
        SYMBOL = "Symbol"
        STRING_QUOTE = "String Quote"
        STRING_CHAR = "String Character"
        STRING_ESCAPE = "String Escaped"
        SELECTION_LINE = "SELECTION_LINE"

        PARENTHESIS_L = '('
        PARENTHESIS_R = ')'
        BRACKET_L = '['
        BRACKET_R = ']'
        BRACE_L = '{'
        BRACE_R = '}'
        ANGLE_L = '<'
        ANGLE_R = '>'
        ACCENT = '^'
        EQ = '='
        COLON = ':'
        SEMICOLON = ';'
        COMMA = ','
        DOLLAR = '$'
        DOT = '.'
        STAR = '*'
        AT = '@'
        TO = "->"
        HYPHEN = "-"
//      SPACE='regexp:\s+'
//      ANY = 'regexp:.'
    ]
}

valkyrie ::= statements*
private statements ::=
    if_statement
  | for_statement
  ;
// ---------------------------------------------------------------------------------------------------------------------
if_statement ::= (IF condition block) [(ELSEIF condition block)* (ELSE block)]
block ::= expression;
condition ::= expression;
private IF ::= "if"
private ELSE ::= "else"
private ELSEIF ::= ELSE IF;
// ---------------------------------------------------------------------------------------------------------------------
for_statement ::= FOR
private FOR ::= "for";
// ---------------------------------------------------------------------------------------------------------------------
private expression ::= namespace;
// ---------------------------------------------------------------------------------------------------------------------
namespace           ::= SYMBOL;