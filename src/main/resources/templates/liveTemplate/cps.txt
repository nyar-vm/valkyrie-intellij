Sorry I still don't quite understand this stuff, break stands for the remaining continuation, return is the continuation obtained from the context, continue seems to stand for itself?

How do I express the recursion of itself?

```
def test(iter) {
    i = iter.next()
    loop {
        if i == null {
            break
        } else if i > 0 {
            return i
        } else {
            i = iter.next()
            continue // i < 0
        }
    }
    return -1
}
```

transform to

```
cps test[k@return](iter) {
    i = iter.next()
    effect@rest = {k@return(-1)}
    do_loop[???, effect@rest, k@return](iter.next);
}

cps do_loop[k@continue, k@break, k@test.return](i) {
    if i == null {
        k@break()
    } else if i > 0 {
        k@test.return(i)
    } else {
        i = iter.next()
        k@continue()
    }
}
```

catch {
    for i in iter {
        if i == null {
            break()
        } else if i > 0 {
            return i
        } else {
            continue()
        }
    }
    return -1
}
match {
    case Break():
    case Continue():
}

effect Loop {
    Break(): ()
    Continue(): ()
}

def break() {
    raise Break()
}
def continue() {
    raise Continue()
}
