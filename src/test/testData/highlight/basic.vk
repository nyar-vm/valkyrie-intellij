namespace ad.bd.cd

let a = true;


inline function package::path::range(min: int, max: int, step: int): Range {
    lambda () { };
    new lazy std::iterator::Range⟨T⟩() {
        from: min,
        till: max,
        step: step,
        _current: min,
    }
}

trait TestTrait {

}


function test(
    // 1
    #[nice(#boat args)]
    // 2
    placeholder mut a: A = 0,
    // 3
    `b`: `B` = null
) -> ReturnType {
    if err != nil {
        return a
    }

    if self.index >= self.term.length() {
        return None;
    };
    let item = self.term.get(self.index);
    self.index += 1;
    return item;
}

"{text}"

json'{
    nice: 123,
    poe:  123
}'

re'ab[cd]'


std::test⟨T⟩(arg)[index];
std::test⟨T⟩(arg)⁅index⁆;


a?.like

a?()


30℃ == 60℉;

for i in tes {
    +retst
}


