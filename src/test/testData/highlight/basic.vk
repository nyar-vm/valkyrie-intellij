namespace ad.bd.cd

let a = true;





trait TestTrait {

}



function test(a: A = 2, bb: AType = null) -> ReturnType {
    lambda ();
    true || false && null;
    TestClass();
}


std::test::<T>(arg)[index];
std::test⦓T⦔(arg)⁅index⁆;


a?.like

a?()


30℃ == 60℉;

for i in tes {
    +retst
}


try Option<u64> {

}
.match {
    with []
    case Some(a):
print("Caught some")
when null || A:
print("Caught null")
}
.match {
case Some(a) && a > 0:
print("a > 0")
case a < 0:
print("a < 0")
case _:
print("a == 0")
}

std::TestClass.call::<T>(test) {

}?
.match {
    with id:
    xxx
    when a>0:
    yyy
    else:
    zzz
}?
.catch {

}