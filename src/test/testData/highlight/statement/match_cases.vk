match a {
    with a
    with [a]
    with [a, b]
}

// when with (expression: bool)
match _ {
    when true:
        @todo
    when a != 0 && b:
        @todo
    when T as A:
        @todo
}

match _ as a {
    type AnyType:
        @todo
    type Debug + Display:
        @todo
    type TypeA | TypeB:
        @todo
    type var := List⟨Integer⟩:
        @todo
    type var := Array⟨Array⟨T⟩⟩:
        @todo
    type var := String if a.is_empty():
        @todo
    when var is not String:
        var.length
}

match _ {
    case true:
        // expr == true
        @todo
    case var := (114, "514", a):
// expr is tuple && expr.1 == 114 && expr.2 == 514; a = expr.3
@todo
case var := None:
@todo
case var := Some(mut a):
@todo
when Success {a: b}:
@todo
}
try Option⟨u64⟩{

}
.match {
#[compile(test)]
when null:
print("branch 1")
when a < 0 || c != 0:
print("branch 2")

print("branch 3")
case Some(a):
print("branch 4")
case Left(a) if a > 0 && b > 0:
print("branch 5")
else:
print("branch _")
}
.match {
when a > 0:
yyy
else:
zzz
}?
.catch {

}
.await

try Option⟨T⟩{
body
}
.catch {
with handler;
case Exception::A(message):
resume message + "A"
case Exception::F(message):
return message + "F"
case Exception::A(message):
resume message + "A"
case Exception::F(message):
return message + "F"
else:
return "else"
}
.match {
case "A":
return "A"
case "F":
return "F"
else:
return "else"
}
.await {

}
try Option⟨u64⟩{

}
.match {
// with []
case Some(a):
print("Caught some")
when null || A:
print("Caught null")
}
.match {
case Some(a) if a > 0:
print("a > 0")
when a < 0:
print("a < 0")
when _:
print("a == 0")
}

match A(`type`) {
case A;
case B;
}



match _ {
case a @Some(a) if a > 0:
print(1)
case a < 0:
print( - 1)
case _: print(0)
}