try Option⟨u64⟩ {
    std::TestClass.call⟨T⟩(test) {

    }
}
.match {
    #[cfg(test)]
    when null || A:
    print("Caught null")
    resume a
    when a < 0 || c!=0:
    print("a < 0")
    when a:
    print("a == 0")
    #[cfg(test)]
    else:
    fine
}
.match {
    #[cfg(test)]
    case Some(a):
    print("Caught some")
    #[cfg(test)]
    case Some(a) if a > 0 && b>0:
    print("a > 0")
}
.match {
    when a>0:
    yyy
    else:
    zzz
}?
.catch {

}
.await

try Option⟨T⟩ {
    body
}
.catch {
    // with handler;
    case Exception::A(message):
    resume message + "A"
    case Exception::F(message):
    return message + "F"
    else:
    return "else"
}
.match {
    case "A":
    return "A"
    case "F":
    return "F"
    else:
    return "else"
}
.await {
    // with handler;
    case Exception::A(message):
    resume message + "A"
    case Exception::F(message):
    return message + "F"
    else:
    return "else"
}
try Option⟨u64⟩ {

}
.match {
// with []
case Some(a):
print("Caught some")
when null || A:
print("Caught null")
}
.match {
    case Some(a) && a > 0:
print("a > 0")
case a < 0:
print("a < 0")
case _:
print("a == 0")
}