class Empty1 {};

class Empty2() {};

generic T {
    where { T: AnyType => AnyType }
}
public static dynamic_transaction_safe volatile final
class Empty3⟨T⟩() {}


open impart
class Inherit1(public virtual XBase, inline YBase) {}

open impart
class Inherit2 {
    public virtual
    inherit x_base: XBase,
    private inline
    inherit _y_base: YBase,
}

class A3⟨T: Debug⟩(Integer){
    get value(): Integer{
        _integer
    }
    set value() {
        _integer
    }
}